#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 40 #"(lib \"image-core.ss\" \"2htdp\" \"private\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 43 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 11 #" Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 3894 0 26 3 81
(
 #";    Copyright \302\251 2009-2010 Brown University and Worcester Pol"
 #"ytechnic Institute."
) 0 0 26 29 1 #"\n"
0 0 26 3 5 #";    "
0 0 26 29 1 #"\n"
0 0 26 3 35 #";    This file is part of Margrave."
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 69
(
 #";    Margrave is free software: you can redistribute it and/or modif"
 #"y"
) 0 0 26 29 1 #"\n"
0 0 26 3 80
(
 #";    it under the terms of the GNU Lesser General Public License as "
 #"published by"
) 0 0 26 29 1 #"\n"
0 0 26 3 70
(
 #";    the Free Software Foundation, either version 3 of the License, "
 #"or"
) 0 0 26 29 1 #"\n"
0 0 26 3 40 #";    (at your option) any later version."
0 0 26 29 1 #"\n"
0 0 26 3 1 #";"
0 0 26 29 1 #"\n"
0 0 26 3 64
#";    Margrave is distributed in the hope that it will be useful,"
0 0 26 29 1 #"\n"
0 0 26 3 67
#";    but WITHOUT ANY WARRANTY; without even the implied warranty of"
0 0 26 29 1 #"\n"
0 0 26 3 66
#";    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
0 0 26 29 1 #"\n"
0 0 26 3 56 #";    GNU Lesser General Public License for more details."
0 0 26 29 1 #"\n"
0 0 26 3 1 #";"
0 0 26 29 1 #"\n"
0 0 26 3 77
(
 #";    You should have received a copy of the GNU Lesser General Publi"
 #"c License"
) 0 0 26 29 1 #"\n"
0 0 26 3 70
(
 #";    along with Margrave.  If not, see <http://www.gnu.org/licenses/"
 #">."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"; tn"
0 0 26 29 1 #"\n"
0 0 26 3 41 #"; Modifications by TN and VS, Summer 2010"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 3 #"xml"
0 0 4 3 1 #" "
0 0 19 3 18 #"\"margrave-xml.rkt\""
0 0 4 3 1 #" "
0 0 19 3 21 #"\"parser-compiler.rkt\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 19 3 1 #" "
0 0 14 3 20 #"stop-margrave-engine"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 21 #"start-margrave-engine"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 5 #"mtext"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 1 #"m"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 9 #"mxtextout"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 11 #"load-policy"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 14 #"pause-for-user"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 91
(
 #"; We use eval to load policies and vocabularies, and the call is in "
 #"the definitions window."
) 0 0 19 29 1 #"\n"
0 0 17 3 91
(
 #"; Thus we need to provide a namespace for eval, or it won't know wha"
 #"t to do with the Policy"
) 0 0 19 29 1 #"\n"
0 0 17 3 25 #"; and PolicyVocab syntax."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 23 #"define-namespace-anchor"
0 0 19 3 1 #" "
0 0 14 3 29 #"the-margrave-namespace-anchor"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 22 #"the-margrave-namespace"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"namespace-anchor->namespace"
0 0 19 3 1 #" "
0 0 14 3 29 #"the-margrave-namespace-anchor"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 65
#";****************************************************************"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 30 #"; Initialize policy file name."
0 0 19 29 1 #"\n"
0 0 17 3 63
#"; This is used by load-policy to assure we don't need to change"
0 0 19 29 1 #"\n"
0 0 17 3 24 #"; the working directory."
0 0 19 29 1 #"\n"
0 0 17 3 19 #"; see normalize-url"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 21 #"local-policy-filename"
0 0 19 3 3 #" \"."
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 75
(
 #"; removeall is remove* in Racket, no need to define it here. Removed"
 #". -- TN"
) 0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 28 #"; symbol or string -> string"
0 0 19 29 1 #"\n"
0 0 17 3 44 #"; Returns the argument, quoted, as a string."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"symbol->quoted-string"
0 0 19 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 4 #" \"\\\""
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 19 3 3 #"\"\\\""
0 0 19 3 1 #"\""
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 4 #" \"\\\""
0 0 19 3 2 #"\" "
0 0 14 3 3 #"arg"
0 0 19 3 4 #" \"\\\""
0 0 19 3 1 #"\""
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 65
#";****************************************************************"
0 0 19 29 1 #"\n"
0 0 17 3 19 #"; Helper functions "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 58
#"; listsubs contains a list of the subsorts for this sort. "
0 0 19 29 1 #"\n"
0 0 17 3 67
#"; However, it may be nested: subsorts may themselves have subsorts."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"add-subtypes-of"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 19 3 1 #" "
0 0 14 3 6 #"parent"
0 0 19 3 1 #" "
0 0 14 3 8 #"listsubs"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 70
(
 #"; listsubs may be empty -- if so, do nothing (we already added paren"
 #"t)"
) 0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 19 3 1 #" "
0 0 14 3 8 #"listsubs"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 19 3 12 #"            "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 17 3 38 #"; Is this a sort with subsorts itself?"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"list?"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 23 #"                       "
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 1 #" "
0 0 14 3 6 #"parent"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 17 3 47 #"; Add subtype relationship between parent and s"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-subsort"
0 0 19 3 1 #" "
0 0 14 3 6 #"parent"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 6 #"))))))"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 17 3 42 #"; Is this a nested subtype? If so, we must"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 17 3 25 #"; deal with s's subtypes."
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 17 3 22 #"; Check for list size;"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 17 3 50 #"; someone may have used parens without meaning to."
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 15 #"add-subtypes-of"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 17 3 23 #"; Bottom of sort tree. "
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-subsort"
0 0 19 3 1 #" "
0 0 14 3 6 #"parent"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 7 #")))))))"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 14 3 8 #"listsubs"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"add-constraint"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 21 #"; Switch by typename:"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 58
#"; (Assume user is passing appropriate number of arguments)"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 54 #"; typename is a symbol at this point, not a string    "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"disjoint"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 10 #" \"DISJOINT"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 7 #")))))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"disjoint-all"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 14 #" \"DISJOINT-ALL"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"nonempty"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 10 #" \"NONEMPTY"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"nonempty-all"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 14 #" \"NONEMPTY-ALL"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"singleton"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 11 #" \"SINGLETON"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"singleton-all"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 15 #" \"SINGLETON-ALL"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"atmostone"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 11 #" \"ATMOSTONE"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"atmostone-all"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 15 #" \"ATMOSTONE-ALL"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"partial-function"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 17 #" \"PARTIALFUNCTION"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"total-function"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 15 #" \"TOTALFUNCTION"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"abstract"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 10 #" \"ABSTRACT"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 12 #"abstract-all"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 14 #" \"ABSTRACT-ALL"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 14 3 8 #"typename"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"subset"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"xml-make-constraint"
0 0 19 3 8 #" \"SUBSET"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 7 #")))))))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 19 3 3 #" \" "
0 0 19 3 6 #"Error!"
0 0 19 3 1 #" "
0 0 19 3 11 #"Unsupported"
0 0 19 3 1 #" "
0 0 19 3 10 #"constraint"
0 0 19 3 7 #" type~n"
0 0 19 3 1 #"\""
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 34 #"; May be a list, may not be a list"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"fold-append-with-spaces"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"list?"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"foldr"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 5 #" \" \" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #"))]"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"string=?"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 19 3 3 #" \"\""
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #")]"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 5 #" \" \" "
0 0 14 3 1 #"t"
0 0 22 3 2 #")]"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 19 3 5 #" \" \" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #"))]"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 14 3 8 #"string=?"
0 0 19 3 1 #" "
0 0 14 3 1 #"t"
0 0 19 3 3 #" \"\""
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                 "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 19 3 5 #" \" \" "
0 0 14 3 1 #"t"
0 0 22 3 4 #")]))"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"             \"\""
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 14 3 8 #"posslist"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 30 #"fold-append-with-spaces-quotes"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"fold-append-with-spaces"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"list?"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 19 3 1 #" "
0 0 14 3 21 #"symbol->quoted-string"
0 0 19 3 1 #" "
0 0 14 3 8 #"posslist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"                               "
0 0 14 3 8 #"posslist"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 75
(
 #"; Add a custom relation of type (car listrels) X (car (cdr listrels)"
 #") X ..."
) 0 0 19 29 1 #"\n"
0 0 17 3 41 #"; Java expects an (unneeded!) arity value"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-predicate"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 19 3 1 #" "
0 0 14 3 8 #"predname"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 14 3 5 #"vocab"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"xml-make-predicate"
0 0 19 3 1 #" "
0 0 14 3 8 #"predname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-relations-list"
0 0 19 3 1 #" "
0 0 14 3 8 #"listrels"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 45 #"; Sets the target property of a policy object"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-target"
0 0 19 3 1 #" "
0 0 14 3 8 #"mypolicy"
0 0 19 3 1 #" "
0 0 14 3 8 #"conjlist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 2 #" \""
0 0 19 3 3 #"SET"
0 0 19 3 1 #" "
0 0 19 3 6 #"TARGET"
0 0 19 3 1 #" "
0 0 19 3 3 #"FOR"
0 0 19 3 7 #" POLICY"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 19 3 1 #" "
0 0 14 3 8 #"mypolicy"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-conjunct-chain"
0 0 19 3 1 #" "
0 0 14 3 8 #"conjlist"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"wrap-list-parens"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"fold-append-with-spaces"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 3 #" \"("
0 0 19 3 2 #"\" "
0 0 14 3 3 #"str"
0 0 19 3 3 #" \")"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 66
#"; !!! TODO This will be much nicer once we're sending XML         "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 63
#"; Add a rule of the form rulename = (dtype reqvars) :- conjlist"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"add-rule"
0 0 19 3 1 #" "
0 0 14 3 8 #"mypolicy"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 17 3 12 #";myvarorder "
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 14 3 8 #"rulename"
0 0 19 3 1 #" "
0 0 14 3 5 #"dtype"
0 0 19 3 1 #" "
0 0 14 3 7 #"reqvars"
0 0 19 3 1 #" "
0 0 14 3 8 #"conjlist"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 33 #";  (if (not (string=? myvarorder "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 48 #";                     (apply string-append (map "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 74
(
 #";                                           (lambda (x) (string-appe"
 #"nd x \""
) 0 0 17 3 49 #" \")) ; leave trailing whitespace in java api too."
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 56 #";                                           reqvars)))) "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 24 #";      (begin (display \""
0 0 17 3 6 #"Error:"
0 0 17 3 1 #" "
0 0 17 3 6 #"Unable"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"add"
0 0 17 3 1 #" "
0 0 17 3 5 #"rule."
0 0 17 3 1 #" "
0 0 17 3 8 #"Variable"
0 0 17 3 1 #" "
0 0 17 3 8 #"ordering"
0 0 17 3 3 #" \")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 31 #";             (display reqvars)"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 23 #";             (newline)"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 24 #";             (display \""
0 0 17 3 3 #"did"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 5 #"agree"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 10 #"vocabulary"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 5 #"which"
0 0 17 3 1 #" "
0 0 17 3 8 #"expected"
0 0 17 3 3 #" \")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 35 #";             (display myvarorder) "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 24 #";             (display \""
0 0 17 3 3 #".\")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 24 #";             (newline))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 19 3 1 #" "
0 0 14 3 8 #"mypolicy"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"xml-make-rule"
0 0 19 3 1 #" "
0 0 14 3 8 #"rulename"
0 0 19 3 1 #" "
0 0 14 3 5 #"dtype"
0 0 19 3 1 #" "
0 0 14 3 8 #"conjlist"
0 0 22 3 5 #")))))"
0 0 19 3 1 #" "
0 0 17 3 28 #";(wrap-list-parens conjlist)"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 74
(
 #"; PolicyVocab: Parses a vocabulary definition and creates an MVocab "
 #"object"
) 0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 19 3 1 #" "
0 0 14 3 11 #"PolicyVocab"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Types"
0 0 19 3 1 #" "
0 0 14 3 9 #"Decisions"
0 0 19 3 1 #" "
0 0 14 3 11 #"Constraints"
0 0 19 3 1 #" "
0 0 14 3 10 #"Predicates"
0 0 19 3 1 #" "
0 0 14 3 9 #"Variables"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 11 #"PolicyVocab"
0 0 19 3 1 #" "
0 0 14 3 11 #"myvocabname"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 5 #"Types"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 19 3 1 #" "
0 0 14 3 4 #"subt"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 9 #"Decisions"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"Predicates"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pname"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 19 3 1 #" "
0 0 14 3 4 #"prel"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 12 #"ReqVariables"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"rvname"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 19 3 1 #" "
0 0 14 3 6 #"rvsort"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 12 #"OthVariables"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"ovname"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 19 3 1 #" "
0 0 14 3 6 #"ovsort"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 11 #"Constraints"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"ctype"
0 0 19 3 1 #" "
0 0 14 3 4 #"crel"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 33 #"; Instantiate a new MVocab object"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 42 #"; If already created, wipe and start over."
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 22 3 2 #"(["
0 0 19 3 1 #" "
0 0 14 3 16 #"create-reply-doc"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 2 #" \""
0 0 19 3 6 #"CREATE"
0 0 19 3 11 #" VOCABULARY"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 7 #")))))])"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"response-is-error?"
0 0 19 3 1 #" "
0 0 14 3 16 #"create-reply-doc"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 2 #" \""
0 0 19 3 6 #"DELETE"
0 0 19 3 11 #" VOCABULARY"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 2 #" \""
0 0 19 3 6 #"CREATE"
0 0 19 3 11 #" VOCABULARY"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 8 #"))))))))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 55 #"; These sections must be in order.                     "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 7 #"; Types"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"xml-make-sort"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 15 #"add-subtypes-of"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"subt"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 19 3 9 #"         "
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 3 1 #" "
0 0 17 3 27 #"; for each type/subtype set"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 26 #"; Decisions               "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"xml-make-decision"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"r"
0 0 22 3 5 #")))))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 12 #"; Predicates"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 13 #"add-predicate"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"pname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"prel"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 3 1 #" "
0 0 17 3 27 #"; for each custom predicate"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 19 #"; Request Variables"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"xml-make-request-var"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"rvname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"rvsort"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 3 1 #" "
0 0 17 3 18 #"; for each req var"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 17 #"; Other Variables"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 19 3 5 #" \"ADD"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"xml-make-other-var"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"ovname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"ovsort"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 3 1 #" "
0 0 17 3 18 #"; for each oth var"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 13 #"; Constraints"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 14 #"add-constraint"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"ctype"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"crel"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 14 3 3 #"..."
0 0 19 3 1 #" "
0 0 17 3 21 #"; for each constraint"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 17 3 47 #"; Return the object for use by the policy macro"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 20 3 1 #"'"
0 0 14 3 11 #"myvocabname"
0 0 22 3 4 #"))))"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 84
(
 #"; Policy: Parses a policy definition and creates an MPolicyLeaf OR M"
 #"PolicySet object"
) 0 0 19 29 1 #"\n"
0 0 17 3 82
(
 #"; Policies are permitted to have child policies, so this may be recu"
 #"rsively called"
) 0 0 19 29 1 #"\n"
0 0 17 3 35 #"; (but is guaranteed to terminate.)"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 19 3 1 #" "
0 0 14 3 6 #"Policy"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"Target"
0 0 19 3 1 #" "
0 0 14 3 5 #"Rules"
0 0 19 3 1 #" "
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 14 3 2 #":-"
0 0 19 3 1 #" "
0 0 14 3 4 #"uses"
0 0 19 3 1 #" "
0 0 14 3 5 #"RComb"
0 0 19 3 1 #" "
0 0 14 3 5 #"PComb"
0 0 19 3 1 #" "
0 0 14 3 8 #"Children"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 6 #"Policy"
0 0 19 3 1 #" "
0 0 14 3 10 #"policyname"
0 0 19 3 1 #" "
0 0 14 3 4 #"uses"
0 0 19 3 1 #" "
0 0 14 3 9 #"vocabname"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"Target"
0 0 19 3 1 #" "
0 0 14 3 5 #"tconj"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 17 3 38 #"; back end expects a list of conjuncts"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 5 #"Rules"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"rulename"
0 0 19 3 1 #" "
0 0 14 3 1 #"="
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"dtype"
0 0 19 3 1 #" "
0 0 14 3 1 #"v"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #":-"
0 0 19 3 1 #" "
0 0 14 3 4 #"conj"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 17 3 92
(
 #"; for each variable in the IDB dec; for each conjunct in the rule it"
 #"self                    "
) 0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 17 3 15 #"; for each rule"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 5 #"RComb"
0 0 19 3 1 #" "
0 0 14 3 5 #"rcstr"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 17 3 23 #"; rule combination alg?"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 5 #"PComb"
0 0 19 3 1 #" "
0 0 14 3 5 #"pcstr"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 17 3 25 #"; policy combination alg?"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 8 #"Children"
0 0 19 3 1 #" "
0 0 14 3 5 #"child"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 17 3 18 #"; child policies? "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 17 3 94
(
 #"; Return a function of one argument that can be called in the contex"
 #"t of some local directory."
) 0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 17 3 55 #"; This is so we know where to find the vocabulary file."
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"local-policy-filename"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"mychildren"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 5 #"child"
0 0 19 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 17 3 76
(
 #"; !!! TODO: Is there a safer alternative to eval here? Look into san"
 #"dboxing?"
) 0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 7 #"myvocab"
0 0 19 3 28 #"                            "
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 20 #"call-with-input-file"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"path-only"
0 0 19 3 1 #" "
0 0 14 3 21 #"local-policy-filename"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"vocabname"
0 0 22 3 1 #")"
0 0 19 3 4 #" \".v"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"in-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eval"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"read"
0 0 4 3 1 #" "
0 0 14 3 7 #"in-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 22 #"the-margrave-namespace"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 26 #"; In SISC, the above was: "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 52 #";                       (eval (read (open-input-file"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 43 #";                           (normalize-url "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 74
(
 #";                            ; Make sure we look in the correct dire"
 #"ctory!"
) 0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 51 #";                            local-policy-filename "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 83
(
 #";                            (string-append (symbol->string 'vocabna"
 #"me) \".v\")))))))"
) 0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 10 #"mychildren"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 20 #"\"CREATE POLICY LEAF\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 4 3 1 #" "
0 0 14 3 7 #"myvocab"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 19 #"\"CREATE POLICY SET\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-vocab-identifier"
0 0 4 3 1 #" "
0 0 14 3 7 #"myvocab"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 79
(
 #";; !!! TODO This was an ugly hack to get around a problem with the ."
 #"p language."
) 0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 43 #"; Either fix the language, or fix the hack."
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 70
(
 #";(let ((myvarorder (m (string-append \"GET REQUEST VECTOR \" myvocab"
 #"))))"
) 0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 32 #"; Set the policy target (if any)"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"the-target"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"tconj"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 10 #"the-target"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"set-target"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"the-target"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 76
(
 #"; Add the rules to the policy. 'true is dealt with in the back-end. "
 #"        "
) 0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 8 #"add-rule"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 17 3 12 #";myvarorder "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"rulename"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"dtype"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"conj"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 3 #"..."
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 56 #"; Set the rule and policy combinator (depending on type)"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 10 #"mychildren"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 25 #"\"SET RCOMBINE FOR POLICY\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-identifiers-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"rcstr"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 25 #"\"SET PCOMBINE FOR POLICY\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-identifiers-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"pcstr"
0 0 4 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 72
(
 #";; !!! TODO: confirm this works. are we loading the sub-policy prope"
 #"rly?"
) 0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 24 #"; Each child is a Policy"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"cpol"
0 0 4 3 1 #" "
0 0 14 3 5 #"child"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"ADD\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 14 3 4 #"cpol"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 14 3 3 #"..."
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 17 3 25 #"; Trigger IDB calculation"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-command"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"PREPARE\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 10 #"policyname"
0 0 22 3 2 #"))"
0 0 4 3 3 #"   "
0 0 17 3 58
#"; close paren for above GET REQUEST VECTOR commented out )"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 6 #"))))))"
0 0 4 3 1 #" "
0 0 17 3 65
#"; Return this policy object (used by policy hierarchy code above)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";****************************************************************"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";;Java Connection"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"windows?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"windows"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"system-path-convention-type"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 14 3 8 #"windows?"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 19 3 3 #"\";\""
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 19 3 3 #"\":\""
0 0 22 3 2 #"))"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 16 #"; Initial values"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"process-id"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"ctrl-function"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 18 #"margrave-home-path"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #"; Home-path is the location of the margrave.rkt, read.rkt, etc. file"
 #"s."
) 0 0 4 29 1 #"\n"
0 0 17 3 46 #"; If not passed, will use (current-directory)."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"start-margrave-engine"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"home-path"
0 0 4 3 1 #" "
0 0 14 3 18 #"margrave-home-path"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 4 3 1 #" "
0 0 14 3 21 #"margrave-command-line"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 19 3 11 #"\"java -cp \""
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 55 #";For testing, use the .class files instead of the .jar:"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 19 3 14 #"\"margrave.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 43 #"; Margrave requires these JAR files to run:"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 12 #"\"kodkod.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 20 #"\"org.sat4j.core.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 14 #"\"sunxacml.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 14 #"\"java_cup.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 20 #"java-class-separator"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"path->string"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 5 #"\"bin\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 10 #"\"json.jar\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 17 #"; Run this class:"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 19 3 33 #"\" edu.wpi.margrave.MCommunicator\""
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 73
(
 #";(printf \"~a ~a ~a~n\" home-path margrave-home-path margrave-comman"
 #"d-line)"
) 0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"process"
0 0 4 3 1 #" "
0 0 14 3 21 #"margrave-command-line"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"process-id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"fourth"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 13 #"ctrl-function"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"fifth"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 18 #"margrave-home-path"
0 0 4 3 1 #" "
0 0 14 3 9 #"home-path"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"cleanup-margrave-engine"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"close-input-port"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"close-output-port"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"close-input-port"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 29 #"; allow restart of the engine"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 10 #"process-id"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 4 3 1 #" "
0 0 14 3 13 #"ctrl-function"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"stop-margrave-engine"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 2 #"#f"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 19 3 36 #"\"<MARGRAVE-COMMAND type=\\\"QUIT\\\" />\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 37 #";Should be this: (m (evalxml \"QUIT\"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 13 #"ctrl-function"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"kill"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 17 3 22 #"; may not be necessary"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"flush-output"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 22 3 1 #")"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 23 #"cleanup-margrave-engine"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 2 #"#t"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #"; exit-handler doesn't get called when exiting DrRacket or when hitt"
 #"ing Run, only when explicitly calling (exit x)"
) 0 0 4 29 1 #"\n"
0 0 17 3 63
#"; (exit:insert-on-callback) doesn't work for some reason either"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";Kill process on exit"
0 0 4 29 1 #"\n"
0 0 17 3 48 #"; (exit:insert-on-callback stop-margrave-engine)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #"; ******************************************************************"
 #"*********************"
) 0 0 4 29 1 #"\n"
0 0 17 3 16 #"; User Functions"
0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #"; ******************************************************************"
 #"*********************"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";; IMPORTANT"
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #"; When adding new user functions, be certain that all string argumen"
 #"ts are converted to"
) 0 0 4 29 1 #"\n"
0 0 17 3 13 #"; lower case!"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; policy-file-name -> MPolicy"
0 0 4 29 1 #"\n"
0 0 17 3 93
(
 #"; This function is used because a raw (load x) call will return void"
 #", not the object desired."
) 0 0 4 29 1 #"\n"
0 0 17 3 93
(
 #"; Note: rather than load with case-sensitivity turned on, all input "
 #"strings need to be passed"
) 0 0 4 29 1 #"\n"
0 0 17 3 31 #"; to the backend in lower-case."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 4 3 1 #" "
0 0 14 3 2 #"fn"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 69
(
 #"; !!! TODO Check whether case-sensitivity problems remain in DrRacke"
 #"t"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 22 #";  (case-sensitive #t)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 50 #";  (display (read (open-input-file fn))) (newline)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 24 #";  (case-sensitive #f)  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 41 #"; (display \"*** \") (display fn) (newline)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 24 #";; Macro returns a func "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 89
(
 #";; Potential security issues here, calling eval on arbitrary code th"
 #"at we \"promise\" is an"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 55 #";; innocent policy definition. Is there a fix for this?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 21 #"; (case-sensitive #t)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 9 #"file-port"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"open-input-file"
0 0 4 3 1 #" "
0 0 14 3 2 #"fn"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"["
0 0 14 3 3 #"pol"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eval"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"read"
0 0 4 3 1 #" "
0 0 14 3 9 #"file-port"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 22 #"the-margrave-namespace"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"fn"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 21 #"; (case-sensitive #f)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 72
(
 #"; don't keep the handle open! call-with-input-file would be better h"
 #"ere."
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 16 #"close-input-port"
0 0 4 3 1 #" "
0 0 14 3 9 #"file-port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 30 #"; return the policy identifier"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 14 3 3 #"pol"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"; mtext"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; string -> document or #f"
0 0 4 29 1 #"\n"
0 0 17 3 112
(
 #"; parses and compiles the string command into XML, executes it, pret"
 #"ty prints the results, and then returns them"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"mtext"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"response-doc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"evalxml"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 25 #"pretty-print-response-xml"
0 0 4 3 1 #" "
0 0 14 3 12 #"response-doc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 12 #"response-doc"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 3 #"; m"
0 0 4 29 1 #"\n"
0 0 17 3 30 #"; XML string -> document or #f"
0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #"; Sends the given XML to java. Returns #f if the engine has not been"
 #" started."
) 0 0 4 29 1 #"\n"
0 0 17 3 80
(
 #"; Uses *buffered* string ports to avoid overhead due to excessive co"
 #"ncatenation."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 17 #"java-process-list"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 114
(
 #"\"Could not send Margrave command because engine was not started. Ca"
 #"ll the start-margrave-engine function first.~n\""
) 0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 22 #"; (printf \"~a;~n\" cmd)"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 22 #"; Send the command XML"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 4 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"flush-output"
0 0 4 3 1 #" "
0 0 14 3 11 #"output-port"
0 0 22 3 1 #")"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 22 #"; Deal with the result"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 14 #"command-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"open-output-string"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 12 #"error-buffer"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"open-output-string"
0 0 22 3 3 #")])"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"flush-error"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 17 3 46 #"; read until nothing is left. This WILL block."
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-char"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 22 3 3 #")])"
0 0 4 3 48 #"                                                "
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 14 3 3 #"eof"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"string"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 12 #"error-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 11 #"flush-error"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"finish-error"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"char-ready?"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 17 3 43 #"; If there is a character waiting, read it."
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-char"
0 0 4 3 1 #" "
0 0 14 3 8 #"err-port"
0 0 22 3 3 #")])"
0 0 4 3 48 #"                                                "
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"string"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 12 #"error-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 12 #"finish-error"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"fetch-result"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-char"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 20 3 5 #"#\\nul"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 17 3 71
(
 #"; End of command's response. Finish any error data that may be waiti"
 #"ng."
) 0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 12 #"finish-error"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 20 3 2 #"#t"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 4 3 1 #" "
0 0 14 3 3 #"eof"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 17 3 36 #"; Port closed. Read error until eof."
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 11 #"flush-error"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 17 3 57 #"; In progress. Keep reading.                             "
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 12 #"write-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"string"
0 0 4 3 1 #" "
0 0 14 3 9 #"next-char"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 14 #"command-buffer"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 12 #"fetch-result"
0 0 22 3 6 #")]))))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 41 #"; Populate the buffered ports            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 20 #"; Handle the results"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 11 #"port-status"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"fetch-result"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"["
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"get-output-string"
0 0 4 3 1 #" "
0 0 14 3 14 #"command-buffer"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"["
0 0 14 3 9 #"error-str"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"get-output-string"
0 0 4 3 1 #" "
0 0 14 3 12 #"error-buffer"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 4 3 1 #" "
0 0 14 3 9 #"error-str"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 153
(
 #"\"~n**************************************************~nAdditional E"
 #"RROR information received:~n ~a~n***********************************"
 #"***************~n\""
) 0 0 4 11 1 #" "
0 0 14 3 9 #"error-str"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"port-status"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 48 #"; Comment out this line to stop printing the XML"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"~a~n\""
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #")"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 48 #"; Parse the reply and return the document struct"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"read-xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 35 #"; Got eof, the port has been cloed."
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 65
#"\"Margrave engine has closed. EOF reached. No document to return.\""
0 0 22 3 1 #")"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 82
(
 #"; !!! TODO: Throw exception here. Should stop even in the middle of "
 #"a load-policy."
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 83
(
 #"; !!! TODO: Once that is done, it'l be safe to call cleanup below. ("
 #"Right now, it's"
) 0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 56
#";           spamming with \"The engine is not started...\""
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 17 3 26 #";(cleanup-margrave-engine)"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 20 3 2 #"#f"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 15 #"; for debugging"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"mxtextout"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 31 #"\"Command: ~a~n~nResponse: ~a~n\""
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"mtext"
0 0 4 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1183 4           0 0           0 196 0 17 3 5 #"; !!!"
0 0 2 29 1 #"\n"
0 0 17 3 83
(
 #"; Need to support these once more. Commands exist, need to route the"
 #"m in java. - TN"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 34 #"; xacml-policy-filename -> MPolicy"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; Loads an XACML policy "
0 0 2 29 1 #"\n"
0 0 17 3 31 #";(define (load-xacml-policy fn)"
0 0 2 29 1 #"\n"
0 0 17 3 132
(
 #";  ((generic-java-method '|readXACML|) (java-null <MPolicy>) (->jstr"
 #"ing fn) (->jstring (string-append my-directory \"xacml20.xsd\"))))"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 32 #"; sqs-policy-filename -> MPolicy"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; Loads an XACML policy "
0 0 2 29 1 #"\n"
0 0 17 3 29 #";(define (load-sqs-policy fn)"
0 0 2 29 1 #"\n"
0 0 17 3 76
(
 #";  ((generic-java-method '|loadSQS|) (java-null <MPolicy>) (->jstrin"
 #"g fn) ))"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 107
(
 #"; !!! This is now an argument to the java invocation. pass \"debug\""
 #" after the class name to activate it - TN"
) 0 0 2 29 1 #"\n"
0 0 17 3 25 #";(define (parser-debug b)"
0 0 2 29 1 #"\n"
0 0 17 3 56
#";  (m (string-append \"DEBUG PARSER \" myMargrave \" \" b)))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 88
(
 #"; !!! We now have sat4j-specific code. Not sure if it can be extende"
 #"d to minisat. Maybe."
) 0 0 2 29 1 #"\n"
0 0 17 3 85
(
 #"; !!!  -- the new code was worthwhile (huge speed up for populated/u"
 #"npopulated). - TN"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 51 #"; Functions to support easier query string creation"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 32 #"; get-existential-request-prefix"
0 0 2 29 1 #"\n"
0 0 17 3 45 #";(define (get-existential-request-prefix pol)"
0 0 2 29 1 #"\n"
0 0 17 3 61
#";  (m (string-append \"GET EXISTENTIAL REQUEST PREFIX \" pol)))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 28 #"; get-request-prefix-closing"
0 0 2 29 1 #"\n"
0 0 17 3 41 #";(define (get-request-prefix-closing pol)"
0 0 2 29 1 #"\n"
0 0 17 3 57
#";  (m (string-append \"GET REQUEST PREFIX CLOSING \" pol)))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 24 #"; get-request-var-vector"
0 0 2 29 1 #"\n"
0 0 17 3 37 #";(define (get-request-var-vector pol)"
0 0 2 29 1 #"\n"
0 0 17 3 53 #";  (m (string-append \"GET REQUEST VAR VECTOR \" pol)))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 18 #"; get-idbname-list"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"get-idbname-list"
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 16 #"\"GET RULES IN  \""
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 28 #"; get-qualified-idbname-list"
0 0 2 29 1 #"\n"
0 0 17 3 58
#"; Same as get-idbname-list but includes policy name prefix"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 26 #"get-qualified-idbname-list"
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 25 #"\"GET QUALIFIED RULES IN \""
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 22 #"; get-request-var-list"
0 0 2 29 1 #"\n"
0 0 17 3 35 #";(define (get-request-var-list pol)"
0 0 2 29 1 #"\n"
0 0 17 3 51 #";  (m (string-append \"GET REQUEST VAR LIST \" pol)))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 26 #"; get-decision-for-idbname"
0 0 2 29 1 #"\n"
0 0 17 3 25 #"; Policy String -> String"
0 0 2 29 1 #"\n"
0 0 17 3 92
(
 #"; Given an idbname, policy will report its decision if a rule, or th"
 #"e empty string otherwise"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 29 #"get-decision-for-rule-idbname"
0 0 2 3 1 #" "
0 0 14 3 6 #"policy"
0 0 2 3 1 #" "
0 0 14 3 7 #"idbname"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 19 #"\"GET DECISION FOR \""
0 0 2 3 1 #" "
0 0 14 3 6 #"policy"
0 0 2 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 2 3 1 #" "
0 0 14 3 7 #"idbname"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 28 #"; rules-with-higher-priority"
0 0 2 29 1 #"\n"
0 0 17 3 23 #"; Policy String -> List"
0 0 2 29 1 #"\n"
0 0 17 3 80
(
 #"; Returns a list of rule idb names who have higher priority than the"
 #" given rule."
) 0 0 2 29 1 #"\n"
0 0 17 3 79
(
 #"; (This doesn't consider whether an overlap is possible, just the ru"
 #"le-ordering"
) 0 0 2 29 1 #"\n"
0 0 17 3 66
#";  given by combining algs.) Names are qualified with policyname:."
0 0 2 29 1 #"\n"
0 0 17 3 48 #";; TODO: Only works for Leaves, not Sets so far."
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 30 #"rule-idbs-with-higher-priority"
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 2 3 1 #" "
0 0 14 3 8 #"rulename"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 27 #"\"GET HIGHER PRIORITY THAN \""
0 0 2 3 1 #" "
0 0 14 3 3 #"pol"
0 0 2 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 2 3 1 #" "
0 0 14 3 8 #"rulename"
0 0 22 3 3 #")))"
0           0 0 0 14 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#"; **************************************************************"
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; Test case procedures"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"test"
0 0 4 3 1 #" "
0 0 14 3 4 #"desc"
0 0 4 3 1 #" "
0 0 14 3 2 #"s1"
0 0 4 3 1 #" "
0 0 14 3 2 #"s2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 4 3 1 #" "
0 0 14 3 2 #"s1"
0 0 4 3 1 #" "
0 0 14 3 2 #"s2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 14 3 4 #"desc"
0 0 4 3 1 #" "
0 0 19 3 11 #"\": Passed.\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 14 3 4 #"desc"
0 0 4 3 1 #" "
0 0 19 3 11 #"\": FAILED!\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"newline"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 73
(
 #"; !!! Not provided. Should it be? Can get count at size via COUNT..."
 #" - TN"
) 0 0 4 29 1 #"\n"
0 0 17 3 56 #";(define (test-model desc qry size exp_sols exp_ceiling)"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";  (if (->boolean "
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";       (m (string-append \"RUN TEST CASE \" qry \" \" size \" \" ex"
 #"p_sols \" \" exp_ceiling)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 49 #";      (display (string-append desc \": Passed.\"))"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";      (display (string-append desc \": FAILED!\")))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";  (newline))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"pause-for-user"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 78
(
 #"\"======================== Hit enter to continue. =================="
 #"======~n~n\""
) 0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"read-char"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
