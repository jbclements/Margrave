#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 40 #"(lib \"image-core.ss\" \"2htdp\" \"private\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 79 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 11 #" Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 11 #" Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 8 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 4508 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";; Import the parser and lexer generators."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 18 #"\"margrave-xml.rkt\""
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 6 #"racket"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 3 #"xml"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 17 #"parser-tools/yacc"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 14 3 16 #"parser-tools/lex"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 17 3 79
(
 #"; prefix-in prefixes the exports of the module name givenwith the sy"
 #"mbol given."
) 0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 17 3 59
#"; (This is why we use :: below for what gets exported as :)"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 9 #"prefix-in"
0 0 19 3 1 #" "
0 0 14 3 1 #":"
0 0 19 3 1 #" "
0 0 14 3 20 #"parser-tools/lex-sre"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"rename-out"
0 0 19 3 1 #" "
0 0 22 3 1 #"["
0 0 14 3 10 #"readsyntax"
0 0 19 3 1 #" "
0 0 14 3 11 #"read-syntax"
0 0 22 3 2 #"])"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 14 3 4 #"read"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 14 3 8 #"evaluate"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 14 3 7 #"evalxml"
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 14 3 3 #"lex"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 47 #";(load-policy (build-path (current-directory) \""
0 0 17 3 5 #"tests"
0 0 17 3 3 #"\" \""
0 0 17 3 18 #"extconference.p\"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"run-examples"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 21 #"start-margrave-engine"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 43 #";; Define the policies used in this script."
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 70
(
 #"; Each policy references a vocabulary, which is loaded automatically"
 #". "
) 0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 17 3 80
(
 #"; The vocabulary defines (among other things) what shape a policy re"
 #"quest takes."
) 0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 18 #"\" \"extconference.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 16 #"\" \"conference1.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 16 #"\" \"conference2.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 11 #"\" \"phone1.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 10 #"\" \"fwex1.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 11 #"\" \"fwex1a.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 10 #"\" \"fwex2.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 10 #"\" \"fwex3.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 20 #"\" \"happyrouterless.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 20 #"\" \"happyroutermore.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"load-policy"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-path"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"current-directory"
0 0 22 3 1 #")"
0 0 19 3 7 #" \"tests"
0 0 19 3 9 #"\" \"iout.p"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 19 #" \"conferencepolicy1"
0 0 19 3 8 #"\" \"conf1"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 19 #" \"conferencepolicy2"
0 0 19 3 8 #"\" \"conf2"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 7 #" \"fwex1"
0 0 19 3 12 #"\" \"firewall1"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 8 #" \"fwex1a"
0 0 19 3 13 #"\" \"firewall1a"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 7 #" \"fwex2"
0 0 19 3 12 #"\" \"firewall2"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 17 #" \"happyrouterless"
0 0 19 3 9 #"\" \"HRless"
0 0 19 3 1 #"\""
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 19 3 17 #" \"happyroutermore"
0 0 19 3 3 #"\" \""
0 0 19 3 7 #"HRmore\""
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; *************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; define-empty-tokens defines the tokens that take no value"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; define-tokens defines the tokens that can contain a value"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 19 #"define-empty-tokens"
0 0 24 3 1 #" "
0 0 14 3 15 #"empty-terminals"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 24 3 13 #"             "
0 0 14 3 7 #"EXPLORE"
0 0 24 3 1 #" "
0 0 14 3 3 #"AND"
0 0 24 3 1 #" "
0 0 14 3 2 #"OR"
0 0 24 3 1 #" "
0 0 14 3 3 #"NOT"
0 0 24 3 1 #" "
0 0 14 3 5 #"COLON"
0 0 24 3 1 #" "
0 0 14 3 7 #"IMPLIES"
0 0 24 3 1 #" "
0 0 14 3 3 #"IFF"
0 0 24 3 1 #" "
0 0 14 3 6 #"LPAREN"
0 0 24 3 1 #" "
0 0 14 3 6 #"RPAREN"
0 0 24 3 1 #" "
0 0 14 3 6 #"EQUALS"
0 0 24 3 1 #" "
0 0 14 3 4 #"SHOW"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 3 #"ALL"
0 0 24 3 1 #" "
0 0 14 3 3 #"ONE"
0 0 24 3 1 #" "
0 0 14 3 2 #"IS"
0 0 24 3 1 #" "
0 0 14 3 13 #"POSSIBLEQMARK"
0 0 24 3 1 #" "
0 0 14 3 7 #"PUBLISH"
0 0 24 3 1 #" "
0 0 14 3 5 #"COMMA"
0 0 24 3 1 #" "
0 0 14 3 5 #"UNDER"
0 0 24 3 1 #" "
0 0 14 3 7 #"TUPLING"
0 0 24 3 1 #" "
0 0 14 3 5 #"DEBUG"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 7 #"CEILING"
0 0 24 3 1 #" "
0 0 14 3 6 #"RENAME"
0 0 24 3 1 #" "
0 0 14 3 4 #"INFO"
0 0 24 3 1 #" "
0 0 14 3 8 #"COLLAPSE"
0 0 24 3 1 #" "
0 0 14 3 7 #"COMPARE"
0 0 24 3 1 #" "
0 0 14 3 9 #"IDBOUTPUT"
0 0 24 3 1 #" "
0 0 14 3 9 #"POPULATED"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 11 #"UNPOPULATED"
0 0 24 3 1 #" "
0 0 14 3 3 #"FOR"
0 0 24 3 1 #" "
0 0 14 3 5 #"CASES"
0 0 24 3 1 #" "
0 0 14 3 3 #"ADD"
0 0 24 3 1 #" "
0 0 14 3 7 #"SUBSORT"
0 0 24 3 1 #" "
0 0 14 3 4 #"SORT"
0 0 24 3 1 #" "
0 0 14 3 10 #"CONSTRAINT"
0 0 24 3 1 #" "
0 0 14 3 8 #"DISJOINT"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 8 #"NONEMPTY"
0 0 24 3 1 #" "
0 0 14 3 9 #"SINGLETON"
0 0 24 3 1 #" "
0 0 14 3 9 #"ATMOSTONE"
0 0 24 3 1 #" "
0 0 14 3 7 #"PARTIAL"
0 0 24 3 1 #" "
0 0 14 3 8 #"FUNCTION"
0 0 24 3 1 #" "
0 0 14 3 5 #"TOTAL"
0 0 24 3 1 #" "
0 0 14 3 8 #"ABSTRACT"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"SUBSET"
0 0 24 3 1 #" "
0 0 14 3 3 #"SET"
0 0 24 3 1 #" "
0 0 14 3 6 #"TARGET"
0 0 24 3 1 #" "
0 0 14 3 9 #"PREDICATE"
0 0 24 3 1 #" "
0 0 14 3 4 #"RULE"
0 0 24 3 1 #" "
0 0 14 3 2 #"TO"
0 0 24 3 1 #" "
0 0 14 3 6 #"CREATE"
0 0 24 3 1 #" "
0 0 14 3 10 #"VOCABULARY"
0 0 24 3 1 #" "
0 0 14 3 8 #"DECISION"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 10 #"REQUESTVAR"
0 0 24 3 1 #" "
0 0 14 3 8 #"OTHERVAR"
0 0 24 3 1 #" "
0 0 14 3 6 #"POLICY"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEAF"
0 0 24 3 1 #" "
0 0 14 3 8 #"RCOMBINE"
0 0 24 3 1 #" "
0 0 14 3 8 #"PCOMBINE"
0 0 24 3 1 #" "
0 0 14 3 7 #"PREPARE"
0 0 24 3 1 #" "
0 0 14 3 4 #"LOAD"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 5 #"XACML"
0 0 24 3 1 #" "
0 0 14 3 3 #"SQS"
0 0 24 3 1 #" "
0 0 14 3 3 #"GET"
0 0 24 3 1 #" "
0 0 14 3 5 #"COUNT"
0 0 24 3 1 #" "
0 0 14 3 4 #"SIZE"
0 0 24 3 1 #" "
0 0 14 3 5 #"RULES"
0 0 24 3 1 #" "
0 0 14 3 6 #"HIGHER"
0 0 24 3 1 #" "
0 0 14 3 8 #"PRIORITY"
0 0 24 3 1 #" "
0 0 14 3 4 #"THAN"
0 0 24 3 1 #" "
0 0 14 3 9 #"QUALIFIED"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 15 #"GUARANTEEDQMARK"
0 0 24 3 1 #" "
0 0 14 3 2 #"IN"
0 1 24 65 1 #"\t"
0 0 14 3 2 #"AT"
0 0 24 3 1 #" "
0 0 14 3 5 #"CHILD"
0 0 24 3 1 #" "
0 0 14 3 7 #"REQUEST"
0 0 24 3 1 #" "
0 0 14 3 6 #"VECTOR"
0 0 24 3 1 #" "
0 0 14 3 4 #"QUIT"
0 0 24 3 1 #" "
0 0 14 3 6 #"DELETE"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 3 #"EOF"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-tokens"
0 0 24 3 1 #" "
0 0 14 3 9 #"terminals"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"<identifier>"
0 0 24 3 1 #" "
0 0 14 3 18 #"<unsigned-integer>"
0 0 22 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 18 #"define-lex-abbrevs"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 10 #"lex:letter"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #":or"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\z"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\Z"
0 0 22 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 9 #"lex:digit"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 20 3 3 #"#\\9"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"["
0 0 14 3 14 #"lex:whitespace"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #":or"
0 0 24 3 1 #" "
0 0 20 3 9 #"#\\newline"
0 0 24 3 1 #" "
0 0 20 3 8 #"#\\return"
0 0 24 3 1 #" "
0 0 20 3 5 #"#\\tab"
0 0 24 3 1 #" "
0 0 20 3 7 #"#\\space"
0 0 24 3 1 #" "
0 0 20 3 6 #"#\\vtab"
0 0 22 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; !!! TODO"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;  How to make this case-insensitive without ugly regexps? Should "
 #"be able to"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;; use macros or define a lexer-trans, but I haven't managed yet."
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; For now, downcase the input string in evaluate and evalxml. - TN"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 7         211 4           0 0           0 34 0 17 3 42
#"; params to macro evaled before expansion?"
0 0 2 29 1 #"\n"
0 0 17 3 69
(
 #"; but this string-append isn't evaluated before lexer-src-pos gets i"
 #"t"
) 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 27 #"; This doesn't work. (Why?)"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 16 #"define-lex-trans"
0 0 2 3 1 #" "
0 0 14 3 2 #"ci"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 12 #"syntax-rules"
0 0 2 3 1 #" "
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 2 #"ci"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 2 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 22 3 4 #"))))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; Produce a lexer function"
0 0 4 29 1 #"\n"
0 0 17 3 43 #"; Assume the caller has downcased the input"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"lex"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"lexer-src-pos"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"[("
0 0 14 3 2 #":+"
0 0 4 3 1 #" "
0 0 14 3 14 #"lex:whitespace"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 17 3 34 #";(printf \"Skipping whitespace~n\") "
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 18 #"return-without-pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 4 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"[("
0 0 14 3 3 #"eof"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"EOF"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"explore\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-EXPLORE"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"load\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-LOAD"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"policy\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-POLICY"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"and\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-AND"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 4 #"\"or\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"token-OR"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"not\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-NOT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-COLON"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"implies\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-IMPLIES"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"iff\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-IFF"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 3 #"\"(\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-LPAREN"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 3 #"\")\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-RPAREN"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 3 #"\"=\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-EQUALS"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"show\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-SHOW"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"all\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-ALL"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"one\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-ONE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 4 #"\"is\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"token-IS"
0 0 22 3 2 #")]"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"possible?\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"token-POSSIBLEQMARK"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"publish\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-PUBLISH"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 3 #"\",\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-COMMA"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"under\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-UNDER"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"tupling\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-TUPLING"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"debug\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-DEBUG"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"ceiling\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-CEILING"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"rename\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-RENAME"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"info\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-INFO"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"collapse\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-COLLAPSE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"compare\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-COMPARE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"idboutput\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-IDBOUTPUT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"populated\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-POPULATED"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 13 #"\"unpopulated\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"token-UNPOPULATED"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"for\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-FOR"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"cases\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-CASES"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"add\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-ADD"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"subsort\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-SUBSORT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"sort\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-SORT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 12 #"\"constraint\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"token-CONSTRAINT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"disjoint\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-DISJOINT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"nonempty\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-NONEMPTY"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"singleton\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-SINGLETON"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"atmostone\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-ATMOSTONE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"partial\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-PARTIAL"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"function\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-FUNCTION"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"total\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-TOTAL"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"abstract\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-ABSTRACT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"subset\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-SUBSET"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"set\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-SET"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"target\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-TARGET"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"predicate\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-PREDICATE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"rule\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-RULE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 4 #"\"to\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"token-TO"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"create\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-CREATE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 12 #"\"vocabulary\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"token-VOCABULARY"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"decision\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-DECISION"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 12 #"\"requestvar\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"token-REQUESTVAR"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"othervar\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-OTHERVAR"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"leaf\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-LEAF"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"rcombine\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-RCOMBINE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"pcombine\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-PCOMBINE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"prepare\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-PREPARE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"load\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-LOAD"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"xacml\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-XACML"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"sqs\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-SQS"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 5 #"\"get\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"token-GET"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"count\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-COUNT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"size\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-SIZE"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"rules\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-RULES"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"higher\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-HIGHER"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 10 #"\"priority\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"token-PRIORITY"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"than\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-THAN"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 11 #"\"qualified\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"token-QUALIFIED"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"next\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-NEXT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 13 #"\"guaranteed?\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"token-GUARANTEEDQMARK"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 4 #"\"in\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"token-IN"
0 0 22 3 2 #")]"
0 1 4 65 1 #"\t"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 4 #"\"at\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"token-AT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 7 #"\"child\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"token-CHILD"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 9 #"\"request\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"token-REQUEST"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"vector\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-VECTOR"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 6 #"\"quit\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-QUIT"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"["
0 0 19 3 8 #"\"delete\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"token-DELETE"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 14 #"; Natural nums"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"[("
0 0 14 3 2 #"::"
0 0 4 3 1 #" "
0 0 14 3 9 #"lex:digit"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":*"
0 0 4 3 1 #" "
0 0 14 3 9 #"lex:digit"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 24 #"token-<unsigned-integer>"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 70
(
 #"; Un-quoted Identifiers -- everything but whitespace and: ( ) \\\" ,"
 #" = :"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 50 #"; Use ----> char-complement <----, not complement."
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"[("
0 0 14 3 2 #"::"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"char-complement"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #":or"
0 0 4 3 1 #" "
0 0 14 3 14 #"lex:whitespace"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 4 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 18 #"token-<identifier>"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 74
(
 #"; Quoted Identifiers -- anything but quote or whitespace wrapped in "
 #"quotes"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 54 #"; strip the quotes when returning the identifier value"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 92
(
 #";; !!!TODO!!! Why disallow whitespace in quotes? XACML likes sort na"
 #"mes with spaces in them."
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"[("
0 0 14 3 2 #"::"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #":+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"char-complement"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #":or"
0 0 4 3 1 #" "
0 0 14 3 14 #"lex:whitespace"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"\\\"\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 18 #"token-<identifier>"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"substring"
0 0 4 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 4 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";Taken from /collects/parser-tools/examples/read.ss"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 25 #"stx-for-original-property"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"read-syntax"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 4 3 1 #" "
0 0 19 3 10 #"\"original\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"syntax-hash"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 110
(
 #";Macro that takes a value and the start and end positions of the tot"
 #"al expression, and returns a syntax object"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 11 #"syntax-case"
0 0 4 3 1 #" "
0 0 14 3 3 #"stx"
0 0 4 3 1 #" "
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 1 #"_"
0 0 4 3 1 #" "
0 0 14 3 5 #"value"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 4 3 1 #" "
0 0 14 3 3 #"end"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 50 #";First have to bind start-pos, end-pos, and source"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 11 #"with-syntax"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"start-pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #"end"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"$~a-start-pos\""
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 17 3 67
#";Have to wrap in syntax and then unwrap to datum, because otherwise"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 17 3 22 #"; we get this error: \""
0 0 17 3 4 #"end:"
0 0 17 3 1 #" "
0 0 17 3 7 #"pattern"
0 0 17 3 1 #" "
0 0 17 3 8 #"variable"
0 0 17 3 1 #" "
0 0 17 3 6 #"cannot"
0 0 17 3 1 #" "
0 0 17 3 2 #"be"
0 0 17 3 1 #" "
0 0 17 3 4 #"used"
0 0 17 3 1 #" "
0 0 17 3 7 #"outside"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 18 #" template in: end\""
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                        "
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 7 #"end-pos"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #"end"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                             "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 4 3 1 #" "
0 0 19 3 13 #"\"$~a-end-pos\""
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #"end"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 17 3 29 #";Source is passed in to parse"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"source"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 3 1 #" "
0 0 14 3 3 #"end"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 19 3 13 #"\"source-name\""
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 17 3 13 #";'source-name"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 20 3 2 #"#f"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 5 #"value"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 6 #"source"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 13 #"position-line"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 12 #"position-col"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 4 3 1 #" "
0 0 14 3 7 #"end-pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 25 #"stx-for-original-property"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1489 4           0 0           0 247 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 25 #"stx-for-original-property"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"read-syntax"
0 0 2 3 1 #" "
0 0 20 3 2 #"#f"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 2 3 1 #" "
0 0 19 3 10 #"\"original\""
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"token"
0 0 2 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 11 #"syntax-case"
0 0 2 3 1 #" "
0 0 14 3 3 #"stx"
0 0 2 3 1 #" "
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"identifier?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 3 #")])"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 11 #"with-syntax"
0 0 2 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 10 #"token-name"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 2 29 1 #"\n"
0 0 2 3 34 #"                                  "
0 0 14 3 4 #"name"
0 0 2 29 1 #"\n"
0 0 2 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 2 29 1 #"\n"
0 0 2 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"format"
0 0 2 3 1 #" "
0 0 19 3 10 #"\"token-~a\""
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 5 #"))))]"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"["
0 0 19 3 13 #"\"source-name\""
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 19 3 13 #"\"source-name\""
0 0 22 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"["
0 0 14 3 9 #"start-pos"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"start-pos"
0 0 22 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"["
0 0 14 3 7 #"end-pos"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"end-pos"
0 0 22 3 3 #")])"
0 0 2 29 1 #"\n"
0 0 2 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 10 #"token-name"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 2 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"datum->syntax"
0 0 2 3 1 #" "
0 0 20 3 2 #"#f"
0 0 2 3 1 #" "
0 0 14 3 3 #"val"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 29 1 #"\n"
0 0 2 3 27 #"                           "
0 0 19 3 13 #"\"source-name\""
0 0 2 29 1 #"\n"
0 0 2 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 13 #"position-line"
0 0 2 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 12 #"position-col"
0 0 2 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 2 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 2 3 1 #" "
0 0 14 3 7 #"end-pos"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 15 #"position-offset"
0 0 2 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 14 3 25 #"stx-for-original-property"
0 0 22 3 8 #")))))]))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"ttoken"
0 0 2 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 11 #"syntax-case"
0 0 2 3 1 #" "
0 0 14 3 3 #"stx"
0 0 2 3 1 #" "
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"_"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"identifier?"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 6 #"syntax"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"token"
0 0 2 3 1 #" "
0 0 14 3 4 #"name"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 22 3 5 #"))]))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 5 #"parse"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"parser"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 7 #"src-pos"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"start"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 3 #"end"
0 0 4 3 1 #" "
0 0 14 3 3 #"EOF"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 6 #"tokens"
0 0 4 3 1 #" "
0 0 14 3 15 #"empty-terminals"
0 0 4 3 1 #" "
0 0 14 3 9 #"terminals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"tok-ok?"
0 0 4 3 1 #" "
0 0 14 3 10 #"token-name"
0 0 4 3 1 #" "
0 0 14 3 11 #"token-value"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 4 3 1 #" "
0 0 14 3 7 #"end-pos"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 68
(
 #"\"Parser error on token: ~a. Start position: ~a. End position: ~a.~n"
 #"\""
) 0 0 4 3 1 #" "
0 0 14 3 11 #"token-value"
0 0 4 3 1 #" "
0 0 14 3 9 #"start-pos"
0 0 4 3 1 #" "
0 0 14 3 7 #"end-pos"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 90
(
 #"; Order of precedence: negation > conjunction > disjunction > implic"
 #"ation > bi-implication"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 84
(
 #"; Implication is not associative (and of course, neither is the unar"
 #"y operator NOT.)"
) 0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 5 #"precs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"left"
0 0 4 3 1 #" "
0 0 14 3 3 #"IFF"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 8 #"nonassoc"
0 0 4 3 1 #" "
0 0 14 3 7 #"IMPLIES"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"left"
0 0 4 3 1 #" "
0 0 14 3 2 #"OR"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"left"
0 0 4 3 1 #" "
0 0 14 3 3 #"AND"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 8 #"nonassoc"
0 0 4 3 1 #" "
0 0 14 3 3 #"NOT"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 7 #"grammar"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 76
(
 #"; Streams of tokens are either empty, an error, or a valid margrave-"
 #"command."
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"start"
0 0 4 3 1 #" "
0 0 22 3 3 #"[()"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 59
#";; If there is an error, ignore everything before the error"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 46 #";; and try to start over right after the error"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 2 #"[("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 2 #"[("
0 0 14 3 16 #"margrave-command"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 2 #"])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 41 #"; One production for each kind of command"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 16 #"margrave-command"
0 0 4 3 1 #" "
0 0 17 3 3 #";[("
0 0 17 3 12 #"<identifier>"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 8 #"build-so"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 27 #"list 'IDENTIFIER $1) 1 1)] "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 3 #";[("
0 0 17 3 6 #"LPAREN"
0 0 17 3 1 #" "
0 0 17 3 12 #"<identifier>"
0 0 17 3 1 #" "
0 0 17 3 26 #"RPAREN) (build-so $2 1 1)]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 17 #"explore-statement"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 26 #";[(ABSTRACT EXPLORE) \"a\"] "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 29 #";         [(LOAD-POLICY) \"b\"]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 3 #";[("
0 0 17 3 4 #"LOAD"
0 0 17 3 1 #" "
0 0 17 3 3 #"exp"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 8 #"build-so"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 20 #"list 'LOAD $2) 1 2)]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 6 #"RENAME"
0 0 4 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"RENAME"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 3 #"GET"
0 0 4 3 1 #" "
0 0 14 3 8 #"get-type"
0 0 4 3 1 #" "
0 0 14 3 10 #"numeric-id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"GET"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 4 #"INFO"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"INFO"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 4 #"INFO"
0 0 4 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"INFO"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 4 #"QUIT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"QUIT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 3 22 #"                      "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 17 #"explore-statement"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 7 #"EXPLORE"
0 0 4 3 1 #" "
0 0 14 3 9 #"condition"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"EXPLORE"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 7 #"EXPLORE"
0 0 4 3 1 #" "
0 0 14 3 9 #"condition"
0 0 4 3 1 #" "
0 0 14 3 22 #"explore-modifiers-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"EXPLORE"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 52 #"; parameters for GET (one/next, id of result object)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"numeric-id"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 18 #"<unsigned-integer>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"id"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-type"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 3 #"ONE"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"type"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"ONE"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 4 #"NEXT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"type"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"NEXT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 46 #"; Optional modifiers for the explore statement"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 16 #"explore-modifier"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 5 #"UNDER"
0 0 4 3 1 #" "
0 0 14 3 6 #"policy"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"UNDER"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 7 #"PUBLISH"
0 0 4 3 1 #" "
0 0 14 3 6 #"LPAREN"
0 0 4 3 1 #" "
0 0 14 3 13 #"variable-list"
0 0 4 3 1 #" "
0 0 14 3 6 #"RPAREN"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"PUBLISH"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"VARIABLE-VECTOR"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 26 #"; (IDBOUTPUT fmla fmla...)"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 9 #"IDBOUTPUT"
0 0 4 3 1 #" "
0 0 14 3 19 #"atomic-formula-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"IDBOUTPUT"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 7 #"TUPLING"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"TUPLING"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 5 #"DEBUG"
0 0 4 3 1 #" "
0 0 14 3 18 #"<unsigned-integer>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"DEBUG"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 7 #"CEILING"
0 0 4 3 1 #" "
0 0 14 3 18 #"<unsigned-integer>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"CEILING"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 22 #"explore-modifiers-list"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 16 #"explore-modifier"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 16 #"explore-modifier"
0 0 4 3 1 #" "
0 0 14 3 22 #"explore-modifiers-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #";**************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 6 #";; ???"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 6 #"policy"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"POLICY"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")])"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #"; condition-formula: A sub-formula of the condition"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 14 3 2 #"OR"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"OR"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 14 3 3 #"AND"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"AND"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 14 3 7 #"IMPLIES"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"IMPLIES"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 14 3 3 #"IFF"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"IFF"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 3 #"NOT"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"NOT"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 6 #"LPAREN"
0 0 4 3 1 #" "
0 0 14 3 17 #"condition-formula"
0 0 4 3 1 #" "
0 0 14 3 6 #"RPAREN"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 14 3 2 #"$2"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 14 #"atomic-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 16 #";[(relation) $1]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 17 3 36 #";[(<identifier> COLON relation) \"a\"]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 75
(
 #"; represents a top-level condition, the fully-developed formula in E"
 #"XPLORE "
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 9 #"condition"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 17 #"condition-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"CONDITION"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 45 #"; An atomic formula can be either of the form"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 19 #"; R(x, y, ...)   or"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 28 #"; Policyname:R(x, y, ...)   "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 14 #"atomic-formula"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 6 #"LPAREN"
0 0 4 3 1 #" "
0 0 14 3 13 #"variable-list"
0 0 4 3 1 #" "
0 0 14 3 6 #"RPAREN"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"ATOMIC-FORMULA-N"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"VARIABLE-VECTOR"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 5 #"COLON"
0 0 4 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 6 #"LPAREN"
0 0 4 3 1 #" "
0 0 14 3 13 #"variable-list"
0 0 4 3 1 #" "
0 0 14 3 6 #"RPAREN"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"ATOMIC-FORMULA-Y"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"VARIABLE-VECTOR"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$5"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 61
#"; ***********************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 53 #"; Used by IDBOUTPUT, SHOW POPULATED, SHOW UNPOPULATED"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 76
(
 #"; May be a normal atomic formula. May also have an empty vector (no "
 #"parens)."
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 27 #"poss-nullary-atomic-formula"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 5 #"COLON"
0 0 4 3 1 #" "
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"EMPTY-ATOMIC-FORMULA-Y"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"EMPTY-ATOMIC-FORMULA-N"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 2 #"[("
0 0 14 3 14 #"atomic-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 14 3 2 #"$1"
0 0 22 3 2 #"])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 19 #"atomic-formula-list"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 27 #"poss-nullary-atomic-formula"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 2 #"[("
0 0 14 3 27 #"poss-nullary-atomic-formula"
0 0 4 3 1 #" "
0 0 14 3 5 #"COMMA"
0 0 4 3 1 #" "
0 0 14 3 19 #"atomic-formula-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 5 #";    "
0 0 17 3 1 #"("
0 0 17 3 57 #"atom [(<identifier>) (build-so (list 'VARIABLE $1) 1 1)])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 51 #"; *************************************************"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 41 #"; a vector of variables. e.g.     x, y, z"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 93
(
 #"; beware of cons -- it will end up giving us dotted pairs here. we w"
 #"ant to build a flat list."
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"variable-list"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"build-so"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"VARIABLE"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 17 3 44 #";[(<identifier> variable-list) (cons $1 $2)]"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 2 #"[("
0 0 14 3 12 #"<identifier>"
0 0 4 3 1 #" "
0 0 14 3 5 #"COMMA"
0 0 4 3 1 #" "
0 0 14 3 13 #"variable-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"VARIABLE"
0 0 4 3 1 #" "
0 0 14 3 2 #"$1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"$3"
0 0 4 3 1 #" "
0 0 22 3 6 #")]))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"e"
0 0 4 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 4 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";Takes a list of syntax objects and returns an XML document"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"syntax->xml"
0 0 4 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 14 3 5 #"empty"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 4 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 14 3 3 #"syn"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 7 #"interns"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 4 3 1 #" "
0 0 14 3 3 #"syn"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 4 3 1 #" "
0 0 17 3 9 #";(printf "
0 0 17 3 1 #"\""
0 0 17 3 11 #"CONVERTING:"
0 0 17 3 16 #" ~a ~n\" interns)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 12 #"first-intern"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"["
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 14 3 12 #"first-intern"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"VARIABLE"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 36 #";Will be returned to variable vector"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"Symbol"
0 0 17 3 25 #" var: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"VARIABLE"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 8 #")))))))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"VARIABLE-VECTOR"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"Symbol"
0 0 17 3 28 #" varvec: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-identifiers-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"VARIABLE-VECTOR"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"ATOMIC-FORMULA-N"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #";("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 6 #"Symbol"
0 0 17 3 1 #" "
0 0 17 3 24 #"atn: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 2 #";("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 25 #"xml-make-atomic-formula-n"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"syntax->datum"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 7 #"interns"
0 0 17 3 3 #")))"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 15 #"helper-syn->xml"
0 0 17 3 1 #" "
0 0 17 3 18 #"(third interns))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-atomic-formula-n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 16 #"ATOMIC-FORMULA-Y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #";("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 6 #"Symbol"
0 0 17 3 1 #" "
0 0 17 3 24 #"aty: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 19 #";Third is the colon"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-atomic-formula-y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"fourth"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"fifth"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"EMPTY-ATOMIC-FORMULA-N"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 37 #"Symbol empty atn: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 2 #";("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 25 #"xml-make-atomic-formula-n"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"syntax->datum"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 7 #"interns"
0 0 17 3 3 #")))"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 15 #"helper-syn->xml"
0 0 17 3 19 #" (third interns))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"xml-make-at"
0 0 14 3 14 #"omic-formula-n"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 22 #"EMPTY-ATOMIC-FORMULA-Y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 37 #"Symbol empty aty: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 19 #";Third is the colon"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 25 #"xml-make-atomic-formula-y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"fourth"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"CONDITION"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"Symbol"
0 0 17 3 26 #" cond: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 65
#";(append (list 'CONDITION) (map helper-syn->xml (rest interns)))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"EXPLORE"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #"; "
0 0 17 3 1 #"("
0 0 17 3 8 #"printf \""
0 0 17 3 6 #"Symbol"
0 0 17 3 1 #" "
0 0 17 3 5 #"exp: "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 4 #"~a~n"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 12 #"first-intern"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 32 #"second interns) (third interns))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 24 #"xml-make-explore-command"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 17 3 33 #";List of modifiers could be empty"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 45 #"                                             "
0 0 14 3 5 #"empty"
0 0 4 29 1 #"\n"
0 0 4 3 45 #"                                             "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 7 #"))))))]"
0 0 4 3 1 #" "
0 0 17 3 52 #";(syntax-e (third interns)) is the list of modifiers"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"TUPLING"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-tupling"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"CEILING"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-ceiling"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"DEBUG"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 14 #"xml-make-debug"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"UNDER"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 14 #"xml-make-under"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"POLICY"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 26 #"xml-make-policy-identifier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"PUBLISH"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 16 #"xml-make-publish"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 63
#";(append (list 'EXPLORE) (map helper-syn->xml (rest interns)))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"AND"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 10 #";(printf \""
0 0 17 3 6 #"Symbol"
0 0 17 3 25 #" and: ~a~n\" first-intern)"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"AND"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 17 3 59
#";(append (list 'AND) (map helper-syn->xml (rest interns)))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"OR"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"OR"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"IMPLIES"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"IMPLIES"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"IFF"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"AIFF"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"NOT"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"NOT"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"RENAME"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 23 #"xml-make-rename-command"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"GET"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 20 #"xml-make-get-command"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"third"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"type"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 13 #"xml-make-type"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"xml-make-id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"INFO"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 21 #"xml-make-info-command"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 24 #"xml-make-info-id-command"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 6 #")))))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"IDBOUTPUT"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 15 #"xml-make-idbout"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 7 #"interns"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"[("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"QUIT"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 13 #"xml-make-quit"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 4 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"UNEXPECTED"
0 0 19 3 1 #" "
0 0 19 3 7 #"SYMBOL:"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 7 #" ~a ~n\""
0 0 4 3 1 #" "
0 0 14 3 12 #"first-intern"
0 0 4 3 1 #" "
0 0 14 3 11 #"first-datum"
0 0 22 3 6 #")]))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"syntax->string"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"syntax->datum"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"syntax->xml"
0 0 4 3 1 #" "
0 0 14 3 3 #"syn"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(["
0 0 14 3 13 #"helper-result"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"helper-syn->xml"
0 0 4 3 1 #" "
0 0 14 3 3 #"syn"
0 0 22 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 14 3 13 #"helper-result"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 13 #"make-document"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-prolog"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"string->xml"
0 0 4 3 1 #" "
0 0 14 3 13 #"helper-result"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"rs"
0 0 4 3 1 #" "
0 0 14 3 2 #"sn"
0 0 4 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"port-count-lines!"
0 0 4 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 14 3 2 #"sn"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 4 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(define (read in)"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";  (syntax->datum (read-syntax #f in)))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";Renamed to read-syntax in provide"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";(define (readsyntax src in)"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (rs src in))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";runs the Lexer/Parser on the input port"
0 0 4 29 1 #"\n"
0 7         451 4           0 0           0 74 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"evaluate"
0 0 2 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 17 #"port-count-lines!"
0 0 2 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"letrec"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 8 #"one-line"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 2 #"()"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 6 #"result"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 2 #"()"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 2 #"ip"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 2 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 4 #"when"
0 0 2 3 1 #" "
0 0 14 3 6 #"result"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 6 #"printf"
0 0 2 3 1 #" "
0 0 19 3 6 #"\"~a~n\""
0 0 2 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 8 #"one-line"
0 0 22 3 6 #"))))))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"one-line"
0 0 22 3 3 #")))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 90
(
 #"; These functions enforce case-insensitivity by downcasing the input"
 #" string before lexing."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"evaluate"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"in"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 4 3 1 #" "
0 0 14 3 2 #"in"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"evalxml"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"in"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"string-downcase"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 11 #"syntax->xml"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 2 #"\316\273"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 4 3 1 #" "
0 0 14 3 2 #"in"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";Reset input port for testing"
0 0 4 29 1 #"\n"
0 0 17 3 103
(
 #";(define test-input-2 (open-input-string \"EXPLORE (foo(x, y, z) AND"
 #" Bar(x, y)) AND C:permit(x, y, z)\"))"
) 0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 12 #"test-input-2"
0 0 17 3 1 #" "
0 0 17 3 57
#"(open-input-string \"EXPLORE foo(x, y, z) AND Bar(x, y)\"))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 39 #"s(parse (lambda() (lex test-input-2))))"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";(define two (second (syntax-e s)))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 40 #"three (syntax-e (first (syntax-e two))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1819 4           0 0           0 302 0 2 29 1 #"\n"
0 0 17 3 78
(
 #"; Simple test string. Includes identifiers, quoted identifiers, a nu"
 #"mber, etc."
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 2 3 1 #" "
0 0 19 3 121
(
 #"\" ( EXPLORE FOO(x) AND mypolicy:deny(x, y, z) AND NOT mypolicy:perm"
 #"it(z, y, x)) OR \\\"idb-name-with:and'in_it\\\" CEILING 5\""
) 0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 2 #"))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 10 #"test-input"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 29 #";Reset input port for testing"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 12 #"test-input-2"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 2 3 1 #" "
0 0 19 3 60
#"\"EXPLORE (foo(x, y, z) AND Bar(x, y)) AND C:permit(x, y, z)\""
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 17 3 79
(
 #";(define test-input-2 (open-input-string \"EXPLORE foo(x, y, z) AND "
 #"Bar(x, y)\"))"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #"("
0 0 14 3 5 #"parse"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #"()"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"lex"
0 0 2 3 1 #" "
0 0 14 3 12 #"test-input-2"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"second"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 2 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 5 #"three"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 2 3 1 #" "
0 0 14 3 3 #"two"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 41 #";(define x-var (first (e (third three))))"
0 0 2 29 1 #"\n"
0 0 17 3 42 #";(define y-var (second (e (third three))))"
0 0 2 29 1 #"\n"
0 0 17 3 48 #";(evaluate (open-input-string \"EXPLORE POLICY\"))"
0 0 2 29 1 #"\n"
0 0 17 3 58
#";(evaluate (open-input-string \"LOAD POLICY sstestPolicy\"))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";Old Version"
0 0 4 29 1 #"\n"
0 7        1699 4           0 0           0 282 0 17 3 59
#";Takes a list of syntax objects and returns an XML document"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"syntax->xml"
0 0 2 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"xml-buffer"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"open-output-string"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"dsp"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 2 3 1 #" "
0 0 14 3 10 #"xml-buffer"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"open-tag"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 2 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"close-tag"
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 3 1 #" "
0 0 19 3 4 #"\"</\""
0 0 2 3 1 #" "
0 0 14 3 3 #"str"
0 0 2 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 14 3 4 #"void"
0 0 2 29 1 #"\n"
0 0 2 3 18 #"                  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"stx"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 7 #"element"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 2 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 24 #"                        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 22 3 2 #"[("
0 0 14 3 5 #"list?"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 2 #")]"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 22 3 2 #"[("
0 0 14 3 7 #"symbol?"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"dsp"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 2 29 1 #"\n"
0 0 2 3 51 #"                                                   "
0 0 22 3 1 #"("
0 0 14 3 8 #"open-tag"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 51 #"                                                   "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 2 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 51 #"                                                   "
0 0 22 3 1 #"("
0 0 14 3 9 #"close-tag"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 5 #"))))]"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 22 3 2 #"[("
0 0 14 3 7 #"syntax?"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 22 3 1 #"]"
0 0 2 29 1 #"\n"
0 0 2 3 26 #"                          "
0 0 22 3 2 #"[("
0 0 14 3 7 #"symbol?"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 7 #"element"
0 0 22 3 5 #"]))))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 13 #"make-document"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-prolog"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 2 3 1 #" "
0 0 20 3 2 #"#f"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-element"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 14 3 5 #"empty"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 3 7 #"       "
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 20 #"\"<Margrave-Command>\""
0 0 2 3 1 #" "
0 0 14 3 10 #"xml-buffer"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 6 #"helper"
0 0 2 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 21 #"\"</Margrave-Command>\""
0 0 2 3 1 #" "
0 0 14 3 10 #"xml-buffer"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 8 #"read-xml"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"open-input-string"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"get-output-string"
0 0 2 3 1 #" "
0 0 14 3 10 #"xml-buffer"
0 0 22 3 7 #")))))))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
