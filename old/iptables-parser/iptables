#!/usr/local/bin/bash
# iptables Configuration Modeling
# Copyright (C) Christopher Barratt 2010 All rights reserved.
#
#  This file is part of Margrave.
#
#  Margrave is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Margrave is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Margrave.  If not, see <http://www.gnu.org/licenses/>.


# Converts a value into a Margrave-compatible atom
function atomize
{
    echo $1 | sed 's/\./-/g'
}

# Converts an address into a Margrave-compatible atom
function resolve
{
    if [[ $1 =~ [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(\/[0-9]+)? ]]; then
        echo $1 | sed 's/\./-/g'
    else
        host $1 | grep -q "has address"
        if [[ $? -eq 0 ]]; then
            echo `host $1 | grep "has address" | cut -d ' ' -f 4 | sed 's/\./-/g'`
        else
            host $1 | grep -q "in-addr.arpa"
            if [[ $? -eq 0 ]]; then
                echo $1 | sed 's/\./-/g'
            fi
        fi
    fi
}

# Parse the command line for the important packet attributes.
SRCADDRS="ip-0-0-0-0/0"
SRCPORT="port-0:65535"
DESTADDRS="ip-0-0-0-0/0"
DESTPORT="port-0:65535"
PROTOCOL="ip"
MESSAGE="icmp-any"
STATES="state-any"
FLAGS="flag-any"
ININTERFACE="if-any"
OUTINTERFACE="if-any"
DECISION=""
CHAIN=""

while [[ $1 ]]
do
    case $1 in
        -A|--append)
            CHAIN=$2
            shift 2
            ;;

        -j|--jump)
            DECISION=$2
            shift 2
            ;;

        -s|--src|--source)
            ADDRESS=`resolve $2`
            if [[ $ADDRESS != "" ]]; then
                SRCADDRS=$ADDRESS
            fi
            shift 2
            ;;

        --sport|--source-port)
            SRCPORT="port-"`atomize $2`
            shift 2
            ;;

        -d|--dest|--destination)
            ADDRESS=`resolve $2`
            if [[ $ADDRESS != "" ]]; then
                DESTADDRS=$ADDRESS
            fi
            shift 2
            ;;

        --dport|--dest-port)
            DESTPORT="port-"`atomize $2`
            shift 2
            ;;

        -p|--protocol)
            PROTOCOL=`atomize $2`
            shift 2
            ;;

        --icmp-type)
            MESSAGE=$2
            shift 2
            ;;

        --state)
            STATES=$2
            shift 2
            ;;

        --tcp-flags)
            FLAGS=$3
            shift 3
            ;;

        --syn)
            FLAGS="SYN"
            shift 2
            ;;

        -i|--in-interface)
            ININTERFACE="if-"`atomize $2`
            shift 2
            ;;

        -o|--out-interface)
            OUTINTERFACE="if-"`atomize $2`
            shift 2
            ;;

        !)
            if [[ $2 == "--syn" ]]
            then
              FLAGS="!SYN"
              shift 2
            else
              shift
            fi
            ;;

        *)
            shift
            ;;
    esac
done

# Append the rule to the firewall policy.
if [[ $DECISION != "" ]]
then
    for SRCADDR in $SRCADDRS;
    do
        for DESTADDR in $DESTADDRS;
        do
            echo "(rule-"`grep rule iptables-firewall.p | wc -l` \
                " = ("$DECISION \
                " chain in-interface src-addr src-port protocol message state flag dest-addr dest-port out-interface) :- " \
                "("$CHAIN" chain) " \
                "("$ININTERFACE" in-interface) " \
                "(ip-"$SRCADDR" src-addr) " \
                "("$SRCPORT" src-port) " \
                "("$PROTOCOL" protocol) " \
                "("$MESSAGE" message) " \
                `for STATE in $( echo $STATES | tr ',' ' ' ); do echo "("$STATE" state) "; done` \
                `for FLAG in $( echo $FLAGS | tr ',' ' ' ); do echo "("$FLAG" flag) "; done` \
                "(ip-"$DESTADDR" dest-addr) " \
                "("$DESTPORT" dest-port) " \
                "("$OUTINTERFACE" out-interface))" >> iptables-firewall.p ;
        done
    done
fi
