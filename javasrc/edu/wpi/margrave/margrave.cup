/*
  	Copyright 2009-2010 Brown University and Worcester Polytechnic Institute.
    
    This file is part of Margrave.

    Margrave is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Margrave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Margrave.  If not, see <http://www.gnu.org/licenses/>.
 */


package edu.wpi.margrave;

import java_cup.runtime.*;
import kodkod.ast.*;
import java.io.*;
import java.util.*;




parser code {:

// _ are distinct throw-away variable identifiers, similar to _ in Datalog.
// Every time we see a variable named _, name it distinctly. In fact,
// never use a Variable that MFormulaManager says is still in use.
long underscoreIndex = 0;

static String tempVarPrefix = "tempVar";

public void report_fatal_error(String message, Object info)
throws Exception
{
	System.err.println(message);
	if(info instanceof Symbol)
	{
		Symbol tok = (Symbol)info;

		// Don't try to recover. Just report the error to the user.
		// Docs say line# = cur_token.left 
		//          col# = cur_token.right

		throw new MParserException(tok.left,
				tok.right, tok.value);
	}

	
	super.report_fatal_error(message, info);
}


Formula performSubstitution(Object collectionIdSymbol, MIDBCollection coll, Formula f, List<String> newvarnames)
throws MSemanticException
{		
	
	if(newvarnames.size() != coll.varOrdering.size())
		report_arity_error(collectionIdSymbol, newvarnames, coll);
	
	HashMap<Variable, Variable> toReplace = new HashMap<Variable, Variable>();
		
	// coll knows what its idbs free variable vector is.
	int ii = 0;
	for(Variable oldv : coll.varOrdering)		
	{
		Variable v = MFormulaManager.makeVariable(newvarnames.get(ii));
		toReplace.put(oldv, v);
		ii ++;	
	}
	
	return f.accept(new RelationAndVariableReplacementV(new HashMap<Relation, Relation>(), toReplace));		
}
	


void report_unknown_identifier(Object idSymbol) throws MSemanticException
{	
	Symbol tok = (Symbol)idSymbol;	
	throw new MSemanticException("Unknown identifier", tok.left, tok.right, idSymbol);
}

void report_unknown_idb(Object collSymbol, Object idbSymbol) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	Symbol collTok = (Symbol)collSymbol;
	throw new MSemanticException("Unknown IDB for the collection "+collTok.value, tok.left, tok.right, idbSymbol);
}


void report_not_single_idb(Object idbSymbol) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	throw new MSemanticException("Please state which IDB you wish to use", tok.left, tok.right, idbSymbol);
}


void report_arity_error(Object idbSymbol, List<String> varlist, MIDBCollection coll) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	throw new MSemanticException("Arity Mismatch. Vector given was: "+varlist+", but collection expects arity "+coll.varOrdering.size()+".", tok.left, tok.right, idbSymbol);
}

private String desugarUnderscore(String v)
{
	if("_".equals(v))
	{
		while(MFormulaManager.varIsSaved(tempVarPrefix+underscoreIndex))
			underscoreIndex++;
								
		// Increment here because we don't actually make the new variable until after the var vector is used.
		underscoreIndex ++;
		
		return tempVarPrefix + underscoreIndex;
	}
	
	return v;
}

List<String> baseIdList(String v)
{
	// Deal with the possibility of v being a _.		
	v = desugarUnderscore(v);

	List<String> lst = new LinkedList<String>();
	lst.add(v);
	return lst;	
}

List<String> restFirstIdList(List<String> vl, String v)
{
	// Deal with the possibility of v being a _.	
	v = desugarUnderscore(v);
	
	vl.add(v);
	return vl;
}

MExploreCondition doEqualsVarVar(String v1, String v2) throws MGEManagerException
{
	Variable var1 = MFormulaManager.makeVariable(v1); 
	Variable var2 = MFormulaManager.makeVariable(v2); 
	Formula f = MFormulaManager.makeEqAtom(var1, var2);
	return new MExploreCondition(f, var1, var2);
}

Formula validateDBIdentifier(Object collectionSymbol, Object dbSymbol)
throws MSemanticException
{
	String objn = (String)((java_cup.runtime.Symbol) collectionSymbol).value;
	String dbn = (String)((java_cup.runtime.Symbol) dbSymbol).value;
	
	// Is objn a policy name? If not, error.
	 MIDBCollection pol = MEnvironment.getPolicyOrView(objn);
	 if(pol == null)
	 	report_unknown_identifier(collectionSymbol);
		   	
	 // Is idb an idb in objn? If not, error
	 Formula idbf = MEnvironment.getIDB(objn, dbn);
	 if(idbf == null)
	 	report_unknown_idb(collectionSymbol, dbSymbol);
	 
	 return idbf;
}

void validateDBIdentifier(Object dbSymbol)
throws MSemanticException
{
	// Either IDB (view) or EDB
	
	String ident = (String)((java_cup.runtime.Symbol) dbSymbol).value;
     
	// Check for IDB
    MIDBCollection pol = MEnvironment.getPolicyOrView(ident);
	if(pol != null)
    {
		// must be the only IDB in this collection, then.
        Formula idbf = MEnvironment.getOnlyIDB(ident);
        if(idbf == null)
        	report_not_single_idb(dbSymbol);
    }
	
	
	
}


MExploreCondition doIdIdV(Object collectionSymbol, Object dbSymbol, List<String> vl)
throws MGEManagerException, MSemanticException
{       
	 Formula idbf = validateDBIdentifier(collectionSymbol, dbSymbol);
		   		  
	 String objn = (String)((java_cup.runtime.Symbol) collectionSymbol).value;
	 String dbn = (String)((java_cup.runtime.Symbol) dbSymbol).value;
	 
	 // Perform variable substitution
	 MIDBCollection pol = MEnvironment.getPolicyOrView(objn);
	 idbf = performSubstitution(collectionSymbol, pol, idbf, vl);
		  
	 // Assemble MExploreCondition object	
	 return new MExploreCondition(idbf, pol, vl);
}

MExploreCondition doIdV(Object identObj, List<String> vl) 
throws MGEManagerException, MSemanticException
{
	// Could be a view or an EDB. If EDB, must
	// remember the Relation we created so that we can check 
	// for validity later.
        
        String ident = (String)((java_cup.runtime.Symbol) identObj).value;
        
        validateDBIdentifier(identObj);
        
        MIDBCollection pol = MEnvironment.getPolicyOrView(ident);
        if(pol != null)
        {                 	
        	
          Formula idbf = MEnvironment.getOnlyIDB(ident);
		  // Perform variable substitution
		  idbf = performSubstitution(identObj, pol, idbf, vl);
		  
		  // Assemble MExploreCondition object	
		  return new MExploreCondition(idbf, pol, vl);	                 
        }
	
	// EDB, then!

	// We don't have a vocabulary yet. So just make the relation.
	// The manager will prevent duplicates. 
	Relation rel = MFormulaManager.makeRelation(ident, vl.size());				 
	
	Expression varvector = MFormulaManager.makeVarTuple(vl);
	Formula f = MFormulaManager.makeAtom(varvector, rel);
		 
	// No variable substitution needed!
	return new MExploreCondition(f, rel, vl);	
}

java_cup.runtime.Symbol getNextToken() throws Exception
{
	java_cup.runtime.Symbol result = getScanner().next_token();
	if(MEnvironment.debugParser)
		System.err.println("PARSER DEBUG -- Reading Token: "+result + " with value: "+result.value);

	return result;
}

List<MIDBCollection> namesToIDBCollections(List<String> names) throws MSemanticException
{
	List<MIDBCollection> result = new ArrayList<MIDBCollection>(names.size());
	
	for(String n : names)
	{
		if(MEnvironment.getPolicyOrView(n) == null)
			throw new MSemanticException("Unknown symbol in UNDER clause: "+n);
		result.add(MEnvironment.getPolicyOrView(n));
	}
	
	return result;
}

void mergeIDBOutList2Into1(Map<String, Set<List<String>>> lst1, 
		Map<String, Set<List<String>>>lst2)
{
	for(String key : lst2.keySet())
	{
		if(lst1.keySet().contains(key))
		{
			lst1.get(key).addAll(lst2.get(key));			
		}
		else
		{
			lst1.put(key, lst2.get(key));
		}
	}
}


:}

/* Preliminaries to set up and use the scanner.  */
init with {: /* No longer an init method? */           :};
scan with {: return getNextToken(); :};

/* Terminals (tokens returned by the scanner). */
terminal			EXPLORE, AND, OR, NOT, COLON, IMPLIES, IFF, LPAREN, RPAREN, EQUALS, 
                    SHOW, ALL, ONE, IS, POSSIBLEQMARK, PUBLISH, COMMA, UNDER, 
                    TUPLING, DEBUG, CEILING, RENAME, INFO, COLLAPSE, COMPARE,
                    IDBOUTPUT, POPULATED, UNPOPULATED, FOR, CASES;
                    
/* Terminals added by TN on 06/29/10 for DrRacket conversion */
terminal ADD, SUBSORT, SORT, CONSTRAINT, DISJOINT, NONEMPTY, SINGLETON, ATMOSTONE,
		PARTIAL, FUNCTION, TOTAL, ABSTRACT, SUBSET, SET, TARGET, PREDICATE,
		RULE, TO, CREATE, VOCABULARY, DECISION, REQUESTVAR, OTHERVAR, POLICY,
		LEAF, RCOMBINE, PCOMBINE, PREPARE, LOAD, XACML, SQS, GET, COUNT, SIZE,
		RULES, HIGHER, PRIORITY, THAN, QUALIFIED, NEXT, GUARANTEEDQMARK, IN,
		AT, CHILD, REQUEST, VECTOR; 


// WITH, IDBS, SILENT       


terminal        String		IDENTIFIER;
terminal        Integer		NATURAL;

/* Non-terminals */
non terminal  	MQuery				QUERY;
non terminal    MExploreCondition 	CONDITION;
//non terminal    MQueryOutputSpec	OUTMODIFIER;
non terminal    List<String>		PUBLISHCLAUSE;
non terminal	List<String>		IDLIST;
non terminal    List<String>		SPIDLIST;
non terminal	List<String>		CONJUNCTCHAIN;
non terminal	List<String>		UNDERSTMT;
non terminal						EMPTY;

/* Convoluted type, but we want to allow multiple var vectors per relation name */ 

non terminal    Map<String, Set<List<String>>>			DBOPTINDEXLIST;

non terminal	Integer				DEBUGSWITCH;
non terminal	Boolean				TUPLINGSWITCH;
non terminal	Integer				CEILINGSWITCH;

non terminal	String				RENAMESTMT;
non terminal	String				INFOSTMT;		
non terminal	Object				COMPARESTMT;

/* New data-manipulation commands */
non terminal	String				CREATESTMT; // includes load
non terminal	String				SETSTMT;    // includes prepare
non terminal	String				ADDSTMT;
non terminal	String				RESULTSSTMT; // show next, get next, count...
non terminal 	String				GETSTMT; // non-model-related


non terminal	Map<String, Set<List<String>>>			IDBCLAUSE;

non terminal 	Object				MARGRAVECOMMAND;	

/* Lower in this list == higher precedence */
precedence left IFF;
precedence left IMPLIES;
precedence left OR;
precedence left AND;
precedence nonassoc NOT;

/* highest precedence + left associative: comma.
   prevents a conflict in the (x comma x) rule(s). 
*/

precedence left COMMA;

/* The grammar */

start with MARGRAVECOMMAND;	

MARGRAVECOMMAND ::=
		QUERY:q
		{: RESULT = q; :}
		|
		INFOSTMT:i
		{: RESULT = i; :}
		|
		RENAMESTMT:r
		{: RESULT = r; :}
		|
		COMPARESTMT:c
		{: RESULT = c; :}
		|
		CREATESTMT:c
		{: RESULT = c; :}
		|
		ADDSTMT:a
		{: RESULT = a; :}
		|
		SETSTMT:s
		{: RESULT = s; :}
		|
		GETSTMT:g
		{: RESULT = g; :}
		|
		RESULTSSTMT:r
		{: RESULT = r; :}
		;

		

/* A QUERY is an EXPLORE statement and condition, with optional restriction and output modifier */
		
		// removed OUTMODIFIER:outmod after publish

QUERY	::=
		
		EXPLORE CONDITION:mpc UNDERSTMT:u PUBLISHCLAUSE:publ  IDBCLAUSE:idbout  
		TUPLINGSWITCH:tupling DEBUGSWITCH:debuglevel CEILINGSWITCH:sizeceiling 
		{: RESULT = MQuery.createFromExplore(
											 mpc.addSeenIDBCollections(parser.namesToIDBCollections(u)), 
		                                     publ, 
		                                     //outmod,
		                                     idbout,
		                                     tupling,
		                                     debuglevel,
		                                     sizeceiling); 
		                                     
		                                     :}				
		;




INFOSTMT ::=
		INFO IDENTIFIER:id
		{: RESULT = MEnvironment.printInfo(id); :}
		|
		INFO
		{: RESULT = MEnvironment.printSystemInfo(); :}
		;



RENAMESTMT ::= 
		RENAME IDENTIFIER:id1 IDENTIFIER:id2
		{: RESULT = MEnvironment.renameIDBCollection(id1, id2); :}
		;


COMPARESTMT ::=
		COMPARE IDENTIFIER:pol1 IDENTIFIER:pol2
		// OUTMODIFIER:outmod 
		IDBCLAUSE:idbout 
		TUPLINGSWITCH:tupling DEBUGSWITCH:debuglevel CEILINGSWITCH:sizeceiling
		{: RESULT = MEnvironment.doCompare(pol1, pol2, 
				//outmod, 
				idbout, tupling, debuglevel, sizeceiling);  :}
		;


RESULTSSTMT ::=
		SHOW NEXT NATURAL:id
		{: RESULT = MEnvironment.showNextModel(id); :}
		|
		GET NEXT NATURAL:id
		{: RESULT = MEnvironment.getNextModel(id); :}
		|
		SHOW ONE NATURAL:id
		{: RESULT = MEnvironment.showFirstModel(id); :}
		|
		GET ONE NATURAL:id
		{: RESULT = MEnvironment.getFirstModel(id); :}
		|
		COUNT NATURAL:id
		{: RESULT = MEnvironment.countModels(id); :}
		|
		COUNT NATURAL:id AT SIZE NATURAL:n
		{: RESULT = MEnvironment.countModels(id, n); :}
		|
		IS POSSIBLEQMARK NATURAL:id
		{: RESULT = MEnvironment.isPoss(id); :}
		|
		IS GUARANTEEDQMARK NATURAL:id
		{: RESULT = MEnvironment.isGuar(id); :}
		|
		SHOW CEILING NATURAL:id
		{: RESULT = MEnvironment.showCeiling(id); :}
		|
		SHOW NEXT COLLAPSE NATURAL:id
		{: RESULT = MEnvironment.showNextCollapse(id); :}
		|
		SHOW POPULATED NATURAL:id DBOPTINDEXLIST:rlist
		{: RESULT = MEnvironment.showPopulated(id, rlist); :}	
		|		
		SHOW UNPOPULATED NATURAL:id  DBOPTINDEXLIST:rlist
		{: RESULT = MEnvironment.showUnpopulated(id, rlist); :}	
		|
		SHOW POPULATED NATURAL:id DBOPTINDEXLIST:rlist FOR CASES DBOPTINDEXLIST:clist
		{: RESULT = MEnvironment.showPopulated(id, rlist, clist); :}	
		|		
		SHOW UNPOPULATED NATURAL:id DBOPTINDEXLIST:rlist FOR CASES DBOPTINDEXLIST:clist
		{: RESULT = MEnvironment.showUnpopulated(id, rlist, clist); :}	
		;
		
		
		
		
CREATESTMT ::= 
		CREATE POLICY LEAF IDENTIFIER:pname IDENTIFIER:vname
		{: RESULT = MEnvironment.createPolicyLeaf(pname, vname); :}
		|
		CREATE POLICY SET IDENTIFIER:pname IDENTIFIER:vname
		{: RESULT = MEnvironment.createPolicySet(pname, vname); :}
		|
		CREATE VOCABULARY IDENTIFIER:vname 
		{: RESULT = MEnvironment.createVocabulary(vname); :}
		|
		PREPARE IDENTIFIER:pname
		{: RESULT = MEnvironment.preparePolicy(pname); :}
		|
		LOAD XACML POLICY IDENTIFIER:fname IDENTIFIER:sfname 
		{: RESULT = MEnvironment.loadXACML(fname, sfname); :}
		|
		LOAD SQS POLICY IDENTIFIER:fname 
		{: RESULT = MEnvironment.loadSQS(fname); :}
		;
	
ADDSTMT ::=
		ADD TO IDENTIFIER:vname SUBSORT IDENTIFIER:parent IDENTIFIER:child 
		{: RESULT = MEnvironment.addSubsort(vname, parent, child); :}
		|
		ADD TO IDENTIFIER:vname SORT IDENTIFIER:sname 
		{: RESULT = MEnvironment.addSort(vname, sname); :}
		|
		ADD TO IDENTIFIER:vname PREDICATE IDENTIFIER:sname  SPIDLIST:constr
		{: RESULT = MEnvironment.addPredicate(vname, sname, constr); :}
		|
		ADD TO IDENTIFIER:vname REQUESTVAR IDENTIFIER:varname IDENTIFIER:domainsort
		{: RESULT = MEnvironment.addRequestVariable(vname, varname, domainsort); :}
		|		
		ADD TO IDENTIFIER:vname OTHERVAR IDENTIFIER:varname IDENTIFIER:domainsort
		{: RESULT = MEnvironment.addOtherVariable(vname, varname, domainsort); :}
		|				
		ADD TO IDENTIFIER:vname DECISION IDENTIFIER:decname
		{: RESULT = MEnvironment.addDecision(vname, decname); :}
		|	
		
		
		ADD TO IDENTIFIER:vname CONSTRAINT DISJOINT IDENTIFIER:s1 IDENTIFIER:s2 
		{: RESULT = MEnvironment.addConstraintDisjoint(vname, s1, s2); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT DISJOINT ALL IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintDisjointAll(vname, s); :}
		|
		
		
		ADD TO IDENTIFIER:vname CONSTRAINT SINGLETON IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintSingleton(vname, s); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT SINGLETON ALL IDENTIFIER:s 
		{: RESULT = MEnvironment.addConstraintSingletonAll(vname, s); :}
		|

		ADD TO IDENTIFIER:vname CONSTRAINT ATMOSTONE IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintAtMostOne(vname, s); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT ATMOSTONE ALL IDENTIFIER:s 
		{: RESULT = MEnvironment.addConstraintAtMostOneAll(vname, s); :}
		|
		
		ADD TO IDENTIFIER:vname CONSTRAINT NONEMPTY IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintNonempty(vname, s); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT NONEMPTY ALL IDENTIFIER:s 
		{: RESULT = MEnvironment.addConstraintNonemptyAll(vname, s); :}
		|
		
		ADD TO IDENTIFIER:vname CONSTRAINT ABSTRACT IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintAbstract(vname, s); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT ABSTRACT ALL IDENTIFIER:s 
		{: RESULT = MEnvironment.addConstraintAbstractAll(vname, s); :}
		|
		
		ADD TO IDENTIFIER:vname CONSTRAINT TOTAL FUNCTION IDENTIFIER:s
		{: RESULT = MEnvironment.addConstraintTotalFunction(vname, s); :}
		|
		ADD TO IDENTIFIER:vname CONSTRAINT PARTIAL FUNCTION IDENTIFIER:s 
		{: RESULT = MEnvironment.addConstraintPartialFunction(vname, s); :}
		
		|
		ADD TO IDENTIFIER:vname CONSTRAINT SUBSET IDENTIFIER:parent IDENTIFIER:child 
		{: RESULT = MEnvironment.addConstraintSubset(vname, parent, child); :}
		|
		ADD RULE TO IDENTIFIER:pname IDENTIFIER:rname IDENTIFIER:decname CONJUNCTCHAIN:cc 
		{: RESULT = MEnvironment.addRule(pname, rname, decname, cc); :}
		|
		ADD CHILD TO IDENTIFIER:parent IDENTIFIER:child
		{: RESULT = MEnvironment.addChild(parent, child); :}
		;

		
		
		// Including the parens would be a nightmare, since parens are their own token.
		// unless we include them implicitly:
		// (   )  (R a b c) (   )
		// then construct (re-construct) w/ () and pass to addRule as it exists?
		
CONJUNCTCHAIN ::=
		LPAREN SPIDLIST:idl RPAREN
		{: RESULT = new ArrayList<String>(); RESULT.add(MEnvironment.foldConcatWithSpaces(idl)); :}
		|
		CONJUNCTCHAIN:cc1 LPAREN SPIDLIST:idl RPAREN
		{: RESULT = cc1; cc1.add(MEnvironment.foldConcatWithSpaces(idl)); :}		
		;
		
		
SETSTMT ::=
		SET TARGET FOR POLICY IDENTIFIER:pname CONJUNCTCHAIN:cc
		{: RESULT = MEnvironment.setPolicyTarget(pname, cc); :}
		
		|
		SET RCOMBINE FOR POLICY IDENTIFIER:pname SPIDLIST:idl
		{: RESULT = MEnvironment.setRCombine(pname, idl); :}
		|
		SET PCOMBINE FOR POLICY IDENTIFIER:pname SPIDLIST:idl
		{: RESULT = MEnvironment.setPCombine(pname, idl); :}		
		;

GETSTMT ::=
		GET DECISION FOR IDENTIFIER:pname IDENTIFIER:rname
		{: RESULT = MEnvironment.getDecisionFor(pname, rname); :}
		|
		GET HIGHER PRIORITY THAN IDENTIFIER:pname IDENTIFIER:rname
		{: RESULT = MEnvironment.getHigherPriorityThan(pname, rname); :}
		|
		GET RULES IN IDENTIFIER:pname 
		{: RESULT = MEnvironment.getRulesIn(pname, false); :}
		|
		GET QUALIFIED RULES IN IDENTIFIER:pname
		{: RESULT = MEnvironment.getRulesIn(pname, true); :}
		|
		GET REQUEST VECTOR IDENTIFIER:vname
		{: RESULT = MEnvironment.getRequestVector(vname); :}
		;


		
		
		
/* various modifiers */

EMPTY ::= ;

TUPLINGSWITCH ::= 
		TUPLING
		{: RESULT = true; :}
		|
		EMPTY
		{: RESULT = false; :}
		;
		
DEBUGSWITCH ::=
		DEBUG NATURAL:n
		{: RESULT = n; :}
		|
		EMPTY
		{: RESULT = 0; :}
		;
		
CEILINGSWITCH ::=		
		CEILING NATURAL:n
		{: RESULT = n; :}
		|
		EMPTY
		{: RESULT = 6; :}
		;		



/* The UNDER clause allows additional policies to add their vocabs, even if they are not mentioned.
   This clause is especially useful in queries with only EDBs. */

UNDERSTMT ::= 		
		UNDER IDLIST:v
		{: RESULT = v; :}
		|
		EMPTY
		{: RESULT = new LinkedList<String>(); :}
		;
		

/* either empty (no idb output) or IDBOUTPUT followed by a list of rel(varlist) */
		
IDBCLAUSE ::=
		IDBOUTPUT DBOPTINDEXLIST:iolist
		{: RESULT = iolist; :} 
		|
	
		/* Wanted an ALL, but it would only work without tupling. */ 
		
		EMPTY
		{: RESULT = new HashMap<String, Set<List<String>>>(); :}				
		; 
	

		
				

/* An OUTMODIFIER is to show all, show one, is possible?. For now, no COUNT. */
		
/*
OUTMODIFIER	::= 
		SHOW ALL COLLAPSE
		{: RESULT = new MQueryOutputSpec("all collapse"); :}
		|
		SHOW ONE COLLAPSE
		{: RESULT = new MQueryOutputSpec("one collapse"); :}
		|		
		SHOW ALL 
		{: RESULT = new MQueryOutputSpec("all"); :}
		|
		SHOW ONE
		{: RESULT = new MQueryOutputSpec("one"); :}
		|
		IS POSSIBLEQMARK
		{: RESULT = new MQueryOutputSpec("?");:}
		|		
		SHOW POPULATED DBOPTINDEXLIST:rlist
		{: RESULT = new MQueryOutputSpec("populated"); RESULT.populatedCandidates = rlist; :}	
		|		
		SHOW UNPOPULATED DBOPTINDEXLIST:rlist
		{: RESULT = new MQueryOutputSpec("unpopulated"); RESULT.populatedCandidates = rlist; :}	
		|
		SHOW POPULATED DBOPTINDEXLIST:rlist FOR CASES DBOPTINDEXLIST:clist
		{: RESULT = new MQueryOutputSpec("populated"); RESULT.populatedCandidates = rlist; RESULT.forCasesOr = clist; :}	
		|		
		SHOW UNPOPULATED DBOPTINDEXLIST:rlist FOR CASES DBOPTINDEXLIST:clist
		{: RESULT = new MQueryOutputSpec("unpopulated"); RESULT.populatedCandidates = rlist; RESULT.forCasesOr = clist; :}	
		|
		SILENT
		{: RESULT = new MQueryOutputSpec("silent"); :}
		|
		EMPTY
		{: RESULT = new MQueryOutputSpec("all"); :}
		;

*/
	/* Need to allow for IDB names that are both x:y and just y. */
	/* Grammar would be more clear with an IDBID non-terminal */
				
DBOPTINDEXLIST ::=
			
		/* pred(x, ...) */ 
		IDENTIFIER:ident LPAREN IDLIST:vl RPAREN
		{: RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident, new HashSet<List<String>>());RESULT.get(ident).add(vl); :}
		|
				
		/* pred */		
		IDENTIFIER:ident
		{: RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident, new HashSet<List<String>>()); :}		
		|
				
		/* collection:pred(x, ...) */		
		IDENTIFIER:ident1 COLON IDENTIFIER:ident2 LPAREN IDLIST:vl RPAREN
		{: RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident1+":"+ident2, new HashSet<List<String>>());RESULT.get(ident1+":"+ident2).add(vl); :}
		|
				
		/* collection:pred */		
		IDENTIFIER:ident1 COLON IDENTIFIER:ident2 
		{: RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident1+":"+ident2, new HashSet<List<String>>()); :}	
		|
				
		/* inductive def */
		DBOPTINDEXLIST:lst1 COMMA DBOPTINDEXLIST:lst2
		{: RESULT = lst1; parser.mergeIDBOutList2Into1(lst1, lst2); :}
		;		
		
			
			
/* A publish clause is PUBLISH <list of vars> */


PUBLISHCLAUSE	::=
		PUBLISH IDLIST:vl
		{: RESULT = vl; :}
		|
		EMPTY
		{: RESULT = null; :}
		;

		
/* Comma-separated sequence of identifiers */		

IDLIST		::=
		IDENTIFIER:v
		{: RESULT = parser.baseIdList(v); :}
		|
		IDLIST:vl COMMA IDENTIFIER:v 
		{: RESULT = parser.restFirstIdList(vl, v); :}
		;

/* SPACE separated sequence of identifiers */
SPIDLIST	::=
			IDENTIFIER:v
			{: RESULT = new ArrayList<String>(); RESULT.add(v); :}
			|
			SPIDLIST:vl IDENTIFIER:v 
			{: RESULT = vl; vl.add(v); :}
			;
		

/* Condition */

CONDITION	::=

		/* policyname:idbname */

		IDENTIFIER:objn COLON IDENTIFIER:dbn LPAREN IDLIST:vl RPAREN
		{: RESULT = parser.doIdIdV(CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5), CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3), vl); :}
		|	
		
		/* edbname(x) or viewname(x)
		  We want to have context (row, col...) in case this is a bad IDB. 
		  So instead of passing ident, we pass the Symbol that contains ident.
		  
		  (Obtained the stack element index from running CUP and looking.)
		*/
		
		IDENTIFIER:ident LPAREN IDLIST:vl RPAREN
		{: RESULT = parser.doIdV(CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3), vl); :}
		|
		
		
		
		
		IDENTIFIER:v1 EQUALS IDENTIFIER:v2
		{: RESULT = parser.doEqualsVarVar(v1, v2); :}
		|
		
		
		LPAREN CONDITION:mpc RPAREN
		{: RESULT = mpc; :}
		|		

		
		NOT CONDITION:mpc
		{: RESULT = mpc.not(); :}
		|

		CONDITION:mpc1 AND CONDITION:mpc2
		{: RESULT = mpc1.and(mpc2); :}
		|
		
		CONDITION:mpc1 OR CONDITION:mpc2
		{: RESULT = mpc1.or(mpc2); :}
		|

		CONDITION:mpc1 IMPLIES CONDITION:mpc2
		{:  RESULT = mpc1.implies(mpc2); :}
		|

		CONDITION:mpc1 IFF CONDITION:mpc2
		{: RESULT = mpc1.iff(mpc2); :}
		;
		
		

