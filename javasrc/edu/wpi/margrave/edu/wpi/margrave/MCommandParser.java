
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 05 10:10:58 EDT 2010
//----------------------------------------------------

package edu.wpi.margrave;

import java_cup.runtime.*;
import kodkod.ast.*;
import java.io.*;
import java.util.*;
import org.w3c.dom.Document;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 05 10:10:58 EDT 2010
  */
public class MCommandParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MCommandParser() {super();}

  /** Constructor which sets the default scanner. */
  public MCommandParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MCommandParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\002\012\000\002" +
    "\020\004\000\002\020\003\000\002\017\005\000\002\021" +
    "\011\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\004\000\002\025\007\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\011\000\002\025\011\000\002\022\007\000\002\022\007" +
    "\000\002\022\005\000\002\022\004\000\002\022\005\000" +
    "\002\022\007\000\002\022\006\000\002\024\010\000\002" +
    "\024\007\000\002\024\010\000\002\024\010\000\002\024" +
    "\010\000\002\024\007\000\002\024\011\000\002\024\011" +
    "\000\002\024\010\000\002\024\011\000\002\024\010\000" +
    "\002\024\011\000\002\024\010\000\002\024\011\000\002" +
    "\024\010\000\002\024\011\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\024\011\000\002\024\007" +
    "\000\002\007\005\000\002\007\006\000\002\023\010\000" +
    "\002\023\010\000\002\023\010\000\002\026\007\000\002" +
    "\026\010\000\002\026\006\000\002\026\007\000\002\026" +
    "\006\000\002\011\002\000\002\015\003\000\002\015\003" +
    "\000\002\014\004\000\002\014\003\000\002\016\004\000" +
    "\002\016\003\000\002\010\004\000\002\010\003\000\002" +
    "\013\004\000\002\013\003\000\002\012\006\000\002\012" +
    "\003\000\002\012\010\000\002\012\005\000\002\012\005" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\004\000\002" +
    "\003\010\000\002\003\006\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\040\004\005\016\015\021\004\031\025\032" +
    "\012\034\020\042\023\057\021\064\017\075\010\076\024" +
    "\101\033\102\032\120\011\121\031\001\002\000\006\022" +
    "\372\112\371\001\002\000\010\007\324\013\327\122\325" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufffc\001" +
    "\002\000\004\122\323\001\002\000\004\002\ufff7\001\002" +
    "\000\006\002\ufff4\122\322\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\321\001\002\000\014\020\275\030\276" +
    "\036\300\037\277\111\301\001\002\000\004\002\ufff9\001" +
    "\002\000\006\065\264\071\265\001\002\000\004\122\225" +
    "\001\002\000\010\060\210\073\206\074\207\001\002\000" +
    "\004\002\ufffd\001\002\000\010\062\104\063\103\115\105" +
    "\001\002\000\006\077\075\100\074\001\002\000\004\122" +
    "\072\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufff8\001\002\000\004\065\070\001" +
    "\002\000\004\123\064\001\002\000\020\020\035\066\037" +
    "\104\042\105\041\110\040\111\043\116\036\001\002\000" +
    "\004\002\ufffa\001\002\000\004\123\063\001\002\000\004" +
    "\117\061\001\002\000\004\040\056\001\002\000\004\104" +
    "\053\001\002\000\004\106\047\001\002\000\004\113\045" +
    "\001\002\000\004\123\044\001\002\000\004\002\ufff0\001" +
    "\002\000\004\122\046\001\002\000\004\002\uffc0\001\002" +
    "\000\004\107\050\001\002\000\004\122\051\001\002\000" +
    "\004\122\052\001\002\000\004\002\uffc1\001\002\000\004" +
    "\113\054\001\002\000\004\122\055\001\002\000\004\002" +
    "\uffbf\001\002\000\004\122\057\001\002\000\004\122\060" +
    "\001\002\000\004\002\uffc2\001\002\000\004\122\062\001" +
    "\002\000\004\002\uffbe\001\002\000\004\002\uffee\001\002" +
    "\000\006\002\uffed\114\065\001\002\000\004\103\066\001" +
    "\002\000\004\123\067\001\002\000\004\002\uffec\001\002" +
    "\000\004\122\071\001\002\000\004\002\uffdf\001\002\000" +
    "\004\122\073\001\002\000\004\002\ufff3\001\002\000\004" +
    "\071\101\001\002\000\004\071\076\001\002\000\004\122" +
    "\077\001\002\000\004\122\100\001\002\000\004\002\uffde" +
    "\001\002\000\004\122\102\001\002\000\004\002\uffdd\001" +
    "\002\000\004\122\126\001\002\000\004\063\111\001\002" +
    "\000\004\063\106\001\002\000\004\122\107\001\002\000" +
    "\004\122\110\001\002\000\004\002\uffc8\001\002\000\004" +
    "\122\112\001\002\000\004\122\113\001\002\000\004\122" +
    "\114\001\002\000\004\013\115\001\002\000\004\122\121" +
    "\001\002\000\006\002\uffc9\013\117\001\002\000\004\122" +
    "\121\001\002\000\006\014\122\122\123\001\002\000\010" +
    "\002\uffa9\014\uffa9\122\uffa9\001\002\000\006\002\uffc6\013" +
    "\uffc6\001\002\000\010\002\uffa8\014\uffa8\122\uffa8\001\002" +
    "\000\006\014\125\122\123\001\002\000\006\002\uffc7\013" +
    "\uffc7\001\002\000\020\043\132\044\135\045\131\061\133" +
    "\066\130\067\127\070\134\001\002\000\004\122\204\001" +
    "\002\000\004\122\203\001\002\000\022\046\153\047\147" +
    "\050\145\051\146\052\154\054\150\055\152\056\151\001" +
    "\002\000\004\122\143\001\002\000\004\122\141\001\002" +
    "\000\004\122\137\001\002\000\004\122\136\001\002\000" +
    "\004\002\uffdb\001\002\000\004\122\140\001\002\000\004" +
    "\002\uffd8\001\002\000\004\122\121\001\002\000\006\002" +
    "\uffda\122\123\001\002\000\004\122\144\001\002\000\004" +
    "\002\uffdc\001\002\000\006\017\200\122\201\001\002\000" +
    "\006\017\175\122\176\001\002\000\006\017\172\122\173" +
    "\001\002\000\004\053\170\001\002\000\004\122\166\001" +
    "\002\000\006\017\163\122\164\001\002\000\006\017\157" +
    "\122\160\001\002\000\004\053\155\001\002\000\004\122" +
    "\156\001\002\000\004\002\uffcb\001\002\000\004\122\162" +
    "\001\002\000\004\122\161\001\002\000\004\002\uffd6\001" +
    "\002\000\004\002\uffd5\001\002\000\004\122\165\001\002" +
    "\000\004\002\uffce\001\002\000\004\002\uffcd\001\002\000" +
    "\004\122\167\001\002\000\004\002\uffca\001\002\000\004" +
    "\122\171\001\002\000\004\002\uffcc\001\002\000\004\122" +
    "\174\001\002\000\004\002\uffd0\001\002\000\004\002\uffcf" +
    "\001\002\000\004\122\177\001\002\000\004\002\uffd2\001" +
    "\002\000\004\002\uffd1\001\002\000\004\122\202\001\002" +
    "\000\004\002\uffd4\001\002\000\004\002\uffd3\001\002\000" +
    "\004\002\uffd7\001\002\000\004\122\205\001\002\000\004" +
    "\002\uffd9\001\002\000\004\040\221\001\002\000\004\040" +
    "\215\001\002\000\004\040\211\001\002\000\004\071\212" +
    "\001\002\000\004\122\213\001\002\000\004\013\115\001" +
    "\002\000\006\002\uffc5\013\117\001\002\000\004\071\216" +
    "\001\002\000\004\122\217\001\002\000\004\122\121\001" +
    "\002\000\006\002\uffc3\122\123\001\002\000\004\071\222" +
    "\001\002\000\004\122\223\001\002\000\004\122\121\001" +
    "\002\000\006\002\uffc4\122\123\001\002\000\004\122\226" +
    "\001\002\000\014\002\uffbd\026\uffbd\027\uffbd\030\uffbd\035" +
    "\227\001\002\000\004\122\245\001\002\000\012\002\uffbd" +
    "\026\234\027\uffbd\030\uffbd\001\002\000\012\002\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\001\002\000\010\002\uffbd\027\236" +
    "\030\uffbd\001\002\000\010\002\uffbb\027\uffbb\030\uffbb\001" +
    "\002\000\010\002\uffbc\027\uffbc\030\uffbc\001\002\000\006" +
    "\002\uffbd\030\241\001\002\000\004\123\240\001\002\000" +
    "\006\002\uffb9\030\uffb9\001\002\000\006\002\uffba\030\uffba" +
    "\001\002\000\004\123\244\001\002\000\004\002\uffb7\001" +
    "\002\000\004\002\ufff2\001\002\000\004\002\uffb8\001\002" +
    "\000\022\002\uffb1\010\251\013\252\024\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\040\uffb1\001\002\000\014\002\uffb4\024\247" +
    "\026\uffb4\027\uffb4\030\uffb4\001\002\000\004\122\245\001" +
    "\002\000\016\002\uffae\024\uffae\026\uffae\027\uffae\030\uffae" +
    "\040\uffae\001\002\000\004\122\260\001\002\000\004\122" +
    "\253\001\002\000\022\002\uffab\014\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\035\uffab\001\002\000\006\014" +
    "\256\024\255\001\002\000\004\122\257\001\002\000\016" +
    "\002\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\040\uffb2\001" +
    "\002\000\022\002\uffaa\014\uffaa\023\uffaa\024\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\035\uffaa\001\002\000\020\002\uffaf\013" +
    "\261\024\uffaf\026\uffaf\027\uffaf\030\uffaf\040\uffaf\001\002" +
    "\000\004\122\253\001\002\000\006\014\263\024\255\001" +
    "\002\000\016\002\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\040\uffb0\001\002\000\004\122\274\001\002\000\006\057" +
    "\267\072\266\001\002\000\004\122\272\001\002\000\004" +
    "\122\270\001\002\000\004\122\271\001\002\000\004\002" +
    "\uffe2\001\002\000\004\122\273\001\002\000\004\002\uffe3" +
    "\001\002\000\004\002\uffe1\001\002\000\004\123\320\001" +
    "\002\000\004\123\317\001\002\000\004\123\312\001\002" +
    "\000\004\123\305\001\002\000\006\033\302\123\303\001" +
    "\002\000\004\123\304\001\002\000\004\002\ufff1\001\002" +
    "\000\004\002\uffe8\001\002\000\004\122\245\001\002\000" +
    "\010\002\uffe7\024\247\040\307\001\002\000\004\041\310" +
    "\001\002\000\004\122\245\001\002\000\006\002\uffe5\024" +
    "\247\001\002\000\004\122\245\001\002\000\010\002\uffe6" +
    "\024\247\040\314\001\002\000\004\041\315\001\002\000" +
    "\004\122\245\001\002\000\006\002\uffe4\024\247\001\002" +
    "\000\004\002\uffe9\001\002\000\004\002\uffef\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\uffe0\001\002\000\010\007\324\013\327\122\325\001" +
    "\002\000\010\010\357\013\360\015\356\001\002\000\030" +
    "\002\uffbd\005\333\006\335\011\332\012\334\023\uffbd\025" +
    "\343\026\uffbd\027\uffbd\030\uffbd\035\uffbd\001\002\000\010" +
    "\007\324\013\327\122\325\001\002\000\014\005\333\006" +
    "\335\011\332\012\334\014\331\001\002\000\032\002\uffa4" +
    "\005\uffa4\006\uffa4\011\uffa4\012\uffa4\014\uffa4\023\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\035\uffa4\001\002\000\010" +
    "\007\324\013\327\122\325\001\002\000\010\007\324\013" +
    "\327\122\325\001\002\000\010\007\324\013\327\122\325" +
    "\001\002\000\010\007\324\013\327\122\325\001\002\000" +
    "\032\002\uffa1\005\333\006\uffa1\011\uffa1\012\uffa1\014\uffa1" +
    "\023\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\035\uffa1\001" +
    "\002\000\032\002\uff9f\005\333\006\335\011\332\012\uff9f" +
    "\014\uff9f\023\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\035" +
    "\uff9f\001\002\000\032\002\uffa2\005\uffa2\006\uffa2\011\uffa2" +
    "\012\uffa2\014\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\035\uffa2\001\002\000\032\002\uffa0\005\333\006\335" +
    "\011\uffa0\012\uffa0\014\uffa0\023\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\035\uffa0\001\002\000\016\002\uffbd\023\347" +
    "\026\uffbd\027\uffbd\030\uffbd\035\uffbd\001\002\000\004\122" +
    "\253\001\002\000\016\002\uffb5\023\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\035\uffb5\001\002\000\020\002\uffb6\023\uffb6\024" +
    "\255\026\uffb6\027\uffb6\030\uffb6\035\uffb6\001\002\000\014" +
    "\002\uffbd\026\uffbd\027\uffbd\030\uffbd\035\227\001\002\000" +
    "\004\122\253\001\002\000\014\002\uffac\026\uffac\027\uffac" +
    "\030\uffac\035\uffac\001\002\000\016\002\uffad\024\255\026" +
    "\uffad\027\uffad\030\uffad\035\uffad\001\002\000\012\002\uffbd" +
    "\026\234\027\uffbd\030\uffbd\001\002\000\010\002\uffbd\027" +
    "\236\030\uffbd\001\002\000\006\002\uffbd\030\241\001\002" +
    "\000\004\002\ufff6\001\002\000\004\122\367\001\002\000" +
    "\004\122\363\001\002\000\004\122\253\001\002\000\006" +
    "\014\362\024\255\001\002\000\032\002\uffa6\005\uffa6\006" +
    "\uffa6\011\uffa6\012\uffa6\014\uffa6\023\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\035\uffa6\001\002\000\004\013\364\001" +
    "\002\000\004\122\253\001\002\000\006\014\366\024\255" +
    "\001\002\000\032\002\uffa7\005\uffa7\006\uffa7\011\uffa7\012" +
    "\uffa7\014\uffa7\023\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\035\uffa7\001\002\000\032\002\uffa5\005\uffa5\006\uffa5\011" +
    "\uffa5\012\uffa5\014\uffa5\023\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\035\uffa5\001\002\000\032\002\uffa3\005\uffa3\006" +
    "\uffa3\011\uffa3\012\uffa3\014\uffa3\023\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\035\uffa3\001\002\000\004\123\374\001" +
    "\002\000\004\123\373\001\002\000\004\002\uffeb\001\002" +
    "\000\004\002\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\026\002\026\017\005\020\025\021\021\022" +
    "\006\023\033\024\012\025\027\026\015\027\013\001\001" +
    "\000\002\001\001\000\004\003\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\115\001\001\000\004\006" +
    "\123\001\001\000\002\001\001\000\004\006\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\230\013\227\001\001\000\004\012" +
    "\245\001\001\000\006\011\232\015\231\001\001\000\002" +
    "\001\001\000\006\011\236\014\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\241\016\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\310\001\001" +
    "\000\002\001\001\000\004\012\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\367" +
    "\001\001\000\002\001\001\000\006\010\341\011\343\001" +
    "\001\000\004\003\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\340\001\001\000\004\003\337\001" +
    "\001\000\004\003\336\001\001\000\004\003\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\345\011\347\001\001\000\004" +
    "\005\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\230\013\351\001\001\000\004\005\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\232\015" +
    "\352\001\001\000\006\011\236\014\353\001\001\000\006" +
    "\011\241\016\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MCommandParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MCommandParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MCommandParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 /* No longer an init method? */           
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getNextToken(); 
    }



// _ are distinct throw-away variable identifiers, similar to _ in Datalog.
// Every time we see a variable named _, name it distinctly. In fact,
// never use a Variable that MFormulaManager says is still in use.
long underscoreIndex = 0;

static String tempVarPrefix = "tempVar";

public void report_fatal_error(String message, Object info)
throws Exception
{
	System.err.println(message);
	if(info instanceof Symbol)
	{
		Symbol tok = (Symbol)info;

		// Don't try to recover. Just report the error to the user.
		// Docs say line# = cur_token.left 
		//          col# = cur_token.right

		throw new MParserException(tok.left,
				tok.right, tok.value);
	}

	
	super.report_fatal_error(message, info);
}


Formula performSubstitution(Object collectionIdSymbol, MIDBCollection coll, Formula f, List<String> newvarnames)
throws MSemanticException
{		
	
	if(newvarnames.size() != coll.varOrdering.size())
		report_arity_error(collectionIdSymbol, newvarnames, coll);
	
	HashMap<Variable, Variable> toReplace = new HashMap<Variable, Variable>();
		
	// coll knows what its idbs free variable vector is.
	int ii = 0;
	for(Variable oldv : coll.varOrdering)		
	{
		Variable v = MFormulaManager.makeVariable(newvarnames.get(ii));
		toReplace.put(oldv, v);
		ii ++;	
	}
	
	return f.accept(new RelationAndVariableReplacementV(new HashMap<Relation, Relation>(), toReplace));		
}
	


void report_unknown_identifier(Object idSymbol) throws MSemanticException
{	
	Symbol tok = (Symbol)idSymbol;	
	throw new MSemanticException("Unknown identifier", tok.left, tok.right, idSymbol);
}

void report_unknown_idb(Object collSymbol, Object idbSymbol) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	Symbol collTok = (Symbol)collSymbol;
	throw new MSemanticException("Unknown IDB for the collection "+collTok.value, tok.left, tok.right, idbSymbol);
}


void report_not_single_idb(Object idbSymbol) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	throw new MSemanticException("Please state which IDB you wish to use", tok.left, tok.right, idbSymbol);
}


void report_arity_error(Object idbSymbol, List<String> varlist, MIDBCollection coll) throws MSemanticException
{
	Symbol tok = (Symbol)idbSymbol;	
	throw new MSemanticException("Arity Mismatch. Vector given was: "+varlist+", but collection expects arity "+coll.varOrdering.size()+".", tok.left, tok.right, idbSymbol);
}

private String desugarUnderscore(String v)
{
	if("_".equals(v))
	{
		while(MFormulaManager.varIsSaved(tempVarPrefix+underscoreIndex))
			underscoreIndex++;
								
		// Increment here because we don't actually make the new variable until after the var vector is used.
		underscoreIndex ++;
		
		return tempVarPrefix + underscoreIndex;
	}
	
	return v;
}

List<String> baseIdList(String v)
{
	// Deal with the possibility of v being a _.		
	v = desugarUnderscore(v);

	List<String> lst = new LinkedList<String>();
	lst.add(v);
	return lst;	
}

List<String> restFirstIdList(List<String> vl, String v)
{
	// Deal with the possibility of v being a _.	
	v = desugarUnderscore(v);
	
	vl.add(v);
	return vl;
}

MExploreCondition doEqualsVarVar(String v1, String v2) throws MGEManagerException
{
	Variable var1 = MFormulaManager.makeVariable(v1); 
	Variable var2 = MFormulaManager.makeVariable(v2); 
	Formula f = MFormulaManager.makeEqAtom(var1, var2);
	return new MExploreCondition(f, var1, var2);
}

Formula validateDBIdentifier(Object collectionSymbol, Object dbSymbol)
throws MSemanticException
{
	String objn = (String)((java_cup.runtime.Symbol) collectionSymbol).value;
	String dbn = (String)((java_cup.runtime.Symbol) dbSymbol).value;
	
	// Is objn a policy name? If not, error.
	 MIDBCollection pol = MEnvironment.getPolicyOrView(objn);
	 if(pol == null)
	 	report_unknown_identifier(collectionSymbol);
		   	
	 // Is idb an idb in objn? If not, error
	 Formula idbf = MEnvironment.getIDB(objn, dbn);
	 if(idbf == null)
	 	report_unknown_idb(collectionSymbol, dbSymbol);
	 
	 return idbf;
}

void validateDBIdentifier(Object dbSymbol)
throws MSemanticException
{
	// Either IDB (view) or EDB
	
	String ident = (String)((java_cup.runtime.Symbol) dbSymbol).value;
     
	// Check for IDB
    MIDBCollection pol = MEnvironment.getPolicyOrView(ident);
	if(pol != null)
    {
		// must be the only IDB in this collection, then.
        Formula idbf = MEnvironment.getOnlyIDB(ident);
        if(idbf == null)
        	report_not_single_idb(dbSymbol);
    }
	
	
	
}


MExploreCondition doIdIdV(Object collectionSymbol, Object dbSymbol, List<String> vl)
throws MGEManagerException, MSemanticException
{       
	 Formula idbf = validateDBIdentifier(collectionSymbol, dbSymbol);
		   		  
	 String objn = (String)((java_cup.runtime.Symbol) collectionSymbol).value;
	 String dbn = (String)((java_cup.runtime.Symbol) dbSymbol).value;
	 
	 // Perform variable substitution
	 MIDBCollection pol = MEnvironment.getPolicyOrView(objn);
	 idbf = performSubstitution(collectionSymbol, pol, idbf, vl);
		  
	 // Assemble MExploreCondition object	
	 return new MExploreCondition(idbf, pol, vl);
}

MExploreCondition doIdV(Object identObj, List<String> vl) 
throws MGEManagerException, MSemanticException
{
	// Could be a view or an EDB. If EDB, must
	// remember the Relation we created so that we can check 
	// for validity later.
        
        String ident = (String)((java_cup.runtime.Symbol) identObj).value;
        
        validateDBIdentifier(identObj);
        
        MIDBCollection pol = MEnvironment.getPolicyOrView(ident);
        if(pol != null)
        {                 	
        	
          Formula idbf = MEnvironment.getOnlyIDB(ident);
		  // Perform variable substitution
		  idbf = performSubstitution(identObj, pol, idbf, vl);
		  
		  // Assemble MExploreCondition object	
		  return new MExploreCondition(idbf, pol, vl);	                 
        }
	
	// EDB, then!

	// We don't have a vocabulary yet. So just make the relation.
	// The manager will prevent duplicates. 
	Relation rel = MFormulaManager.makeRelation(ident, vl.size());				 
	
	Expression varvector = MFormulaManager.makeVarTuple(vl);
	Formula f = MFormulaManager.makeAtom(varvector, rel);
		 
	// No variable substitution needed!
	return new MExploreCondition(f, rel, vl);	
}

java_cup.runtime.Symbol getNextToken() throws Exception
{
	java_cup.runtime.Symbol result = getScanner().next_token();
	if(MEnvironment.debugParser)
		System.err.println("PARSER DEBUG -- Reading Token: "+result + " with value: "+result.value);

	return result;
}

List<MIDBCollection> namesToIDBCollections(List<String> names) throws MSemanticException
{
	List<MIDBCollection> result = new ArrayList<MIDBCollection>(names.size());
	
	for(String n : names)
	{
		if(MEnvironment.getPolicyOrView(n) == null)
			throw new MSemanticException("Unknown symbol in UNDER clause: "+n);
		result.add(MEnvironment.getPolicyOrView(n));
	}
	
	return result;
}

void mergeIDBOutList2Into1(Map<String, Set<List<String>>> lst1, 
		Map<String, Set<List<String>>>lst2)
{
	for(String key : lst2.keySet())
	{
		if(lst1.keySet().contains(key))
		{
			lst1.get(key).addAll(lst2.get(key));			
		}
		else
		{
			lst1.put(key, lst2.get(key));
		}
	}
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MCommandParser$actions {
  private final MCommandParser parser;

  /** Constructor */
  CUP$MCommandParser$actions(MCommandParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MCommandParser$do_action(
    int                        CUP$MCommandParser$act_num,
    java_cup.runtime.lr_parser CUP$MCommandParser$parser,
    java.util.Stack            CUP$MCommandParser$stack,
    int                        CUP$MCommandParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MCommandParser$result;

      /* select the action based on the action number */
      switch (CUP$MCommandParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDITION ::= CONDITION IFF CONDITION 
            {
              MExploreCondition RESULT =null;
		int mpc1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int mpc1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		MExploreCondition mpc1 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int mpc2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int mpc2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MExploreCondition mpc2 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = mpc1.iff(mpc2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDITION ::= CONDITION IMPLIES CONDITION 
            {
              MExploreCondition RESULT =null;
		int mpc1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int mpc1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		MExploreCondition mpc1 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int mpc2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int mpc2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MExploreCondition mpc2 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		  RESULT = mpc1.implies(mpc2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDITION ::= CONDITION OR CONDITION 
            {
              MExploreCondition RESULT =null;
		int mpc1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int mpc1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		MExploreCondition mpc1 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int mpc2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int mpc2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MExploreCondition mpc2 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = mpc1.or(mpc2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDITION ::= CONDITION AND CONDITION 
            {
              MExploreCondition RESULT =null;
		int mpc1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int mpc1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		MExploreCondition mpc1 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int mpc2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int mpc2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MExploreCondition mpc2 = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = mpc1.and(mpc2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDITION ::= NOT CONDITION 
            {
              MExploreCondition RESULT =null;
		int mpcleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int mpcright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MExploreCondition mpc = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = mpc.not(); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDITION ::= LPAREN CONDITION RPAREN 
            {
              MExploreCondition RESULT =null;
		int mpcleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int mpcright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		MExploreCondition mpc = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = mpc; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDITION ::= IDENTIFIER EQUALS IDENTIFIER 
            {
              MExploreCondition RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = parser.doEqualsVarVar(v1, v2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDITION ::= IDENTIFIER LPAREN IDLIST RPAREN 
            {
              MExploreCondition RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = parser.doIdV(CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3), vl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDITION ::= IDENTIFIER COLON IDENTIFIER LPAREN IDLIST RPAREN 
            {
              MExploreCondition RESULT =null;
		int objnleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).left;
		int objnright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).right;
		String objn = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).value;
		int dbnleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int dbnright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String dbn = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = parser.doIdIdV(CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5), CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3), vl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONDITION",1, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SPIDLIST ::= SPIDLIST IDENTIFIER 
            {
              List<String> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = vl; vl.add(v); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("SPIDLIST",4, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SPIDLIST ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(v); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("SPIDLIST",4, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IDLIST ::= IDLIST COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = parser.restFirstIdList(vl, v); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("IDLIST",3, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IDLIST ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = parser.baseIdList(v); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("IDLIST",3, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PUBLISHCLAUSE ::= EMPTY 
            {
              List<String> RESULT =null;
		 RESULT = null; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("PUBLISHCLAUSE",2, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PUBLISHCLAUSE ::= PUBLISH IDLIST 
            {
              List<String> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = vl; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("PUBLISHCLAUSE",2, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DBOPTINDEXLIST ::= DBOPTINDEXLIST COMMA DBOPTINDEXLIST 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int lst1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int lst1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		Map<String,Set<List<String>>> lst1 = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int lst2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> lst2 = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = lst1; parser.mergeIDBOutList2Into1(lst1, lst2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DBOPTINDEXLIST",8, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DBOPTINDEXLIST ::= IDENTIFIER COLON IDENTIFIER 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident1+":"+ident2, new HashSet<List<String>>()); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DBOPTINDEXLIST",8, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DBOPTINDEXLIST ::= IDENTIFIER COLON IDENTIFIER LPAREN IDLIST RPAREN 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident1+":"+ident2, new HashSet<List<String>>());RESULT.get(ident1+":"+ident2).add(vl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DBOPTINDEXLIST",8, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DBOPTINDEXLIST ::= IDENTIFIER 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident, new HashSet<List<String>>()); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DBOPTINDEXLIST",8, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DBOPTINDEXLIST ::= IDENTIFIER LPAREN IDLIST RPAREN 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = new HashMap<String, Set<List<String>>>(); RESULT.put(ident, new HashSet<List<String>>());RESULT.get(ident).add(vl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DBOPTINDEXLIST",8, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IDBCLAUSE ::= EMPTY 
            {
              Map<String,Set<List<String>>> RESULT =null;
		 RESULT = new HashMap<String, Set<List<String>>>(); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("IDBCLAUSE",9, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IDBCLAUSE ::= IDBOUTPUT DBOPTINDEXLIST 
            {
              Map<String,Set<List<String>>> RESULT =null;
		int iolistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int iolistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> iolist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = iolist; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("IDBCLAUSE",9, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UNDERSTMT ::= EMPTY 
            {
              List<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("UNDERSTMT",6, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UNDERSTMT ::= UNDER IDLIST 
            {
              List<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> v = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = v; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("UNDERSTMT",6, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CEILINGSWITCH ::= EMPTY 
            {
              Integer RESULT =null;
		 RESULT = 6; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CEILINGSWITCH",12, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CEILINGSWITCH ::= CEILING NATURAL 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CEILINGSWITCH",12, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEBUGSWITCH ::= EMPTY 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DEBUGSWITCH",10, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEBUGSWITCH ::= DEBUG NATURAL 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("DEBUGSWITCH",10, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TUPLINGSWITCH ::= EMPTY 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("TUPLINGSWITCH",11, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TUPLINGSWITCH ::= TUPLING 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("TUPLINGSWITCH",11, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EMPTY ::= 
            {
              Object RESULT =null;

              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("EMPTY",7, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GETSTMT ::= GET REQUEST VECTOR IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getRequestVector(vname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("GETSTMT",20, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GETSTMT ::= GET QUALIFIED RULES IN IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getRulesIn(pname, true); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("GETSTMT",20, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GETSTMT ::= GET RULES IN IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getRulesIn(pname, false); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("GETSTMT",20, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GETSTMT ::= GET HIGHER PRIORITY THAN IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int rnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String rname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getHigherPriorityThan(pname, rname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("GETSTMT",20, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GETSTMT ::= GET DECISION FOR IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int rnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String rname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getDecisionFor(pname, rname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("GETSTMT",20, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SETSTMT ::= SET PCOMBINE FOR POLICY IDENTIFIER SPIDLIST 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.setPCombine(pname, idl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("SETSTMT",17, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SETSTMT ::= SET RCOMBINE FOR POLICY IDENTIFIER SPIDLIST 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.setRCombine(pname, idl); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("SETSTMT",17, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SETSTMT ::= SET TARGET FOR POLICY IDENTIFIER CONJUNCTCHAIN 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> cc = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.setPolicyTarget(pname, cc); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("SETSTMT",17, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONJUNCTCHAIN ::= CONJUNCTCHAIN LPAREN SPIDLIST RPAREN 
            {
              List<String> RESULT =null;
		int cc1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int cc1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		List<String> cc1 = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = cc1; cc1.add(MEnvironment.foldConcatWithSpaces(idl)); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONJUNCTCHAIN",5, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONJUNCTCHAIN ::= LPAREN SPIDLIST RPAREN 
            {
              List<String> RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		List<String> idl = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		 RESULT = new ArrayList<String>(); RESULT.add(MEnvironment.foldConcatWithSpaces(idl)); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CONJUNCTCHAIN",5, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ADDSTMT ::= ADD CHILD TO IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String child = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addChild(parent, child); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ADDSTMT ::= ADD RULE TO IDENTIFIER IDENTIFIER IDENTIFIER CONJUNCTCHAIN 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int rnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int rnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		String rname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int decnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int decnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String decname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> cc = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addRule(pname, rname, decname, cc); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT SUBSET IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String child = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintSubset(vname, parent, child); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT PARTIAL FUNCTION IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintPartialFunction(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT TOTAL FUNCTION IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintTotalFunction(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT ABSTRACT ALL IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintAbstractAll(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT ABSTRACT IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintAbstract(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT NONEMPTY ALL IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintNonemptyAll(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT NONEMPTY IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintNonempty(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT ATMOSTONE ALL IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintAtMostOneAll(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT ATMOSTONE IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintAtMostOne(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT SINGLETON ALL IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintSingletonAll(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT SINGLETON IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintSingleton(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT DISJOINT ALL IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintDisjointAll(vname, s); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ADDSTMT ::= ADD TO IDENTIFIER CONSTRAINT DISJOINT IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addConstraintDisjoint(vname, s1, s2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ADDSTMT ::= ADD TO IDENTIFIER DECISION IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int decnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int decnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String decname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addDecision(vname, decname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ADDSTMT ::= ADD TO IDENTIFIER OTHERVAR IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int domainsortleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int domainsortright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String domainsort = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addOtherVariable(vname, varname, domainsort); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ADDSTMT ::= ADD TO IDENTIFIER REQUESTVAR IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int domainsortleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int domainsortright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String domainsort = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addRequestVariable(vname, varname, domainsort); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ADDSTMT ::= ADD TO IDENTIFIER PREDICATE IDENTIFIER SPIDLIST 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int snameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int snameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String sname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int constrleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int constrright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		List<String> constr = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addPredicate(vname, sname, constr); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ADDSTMT ::= ADD TO IDENTIFIER SORT IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int snameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int snameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String sname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addSort(vname, sname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ADDSTMT ::= ADD TO IDENTIFIER SUBSORT IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String parent = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int childleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int childright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String child = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.addSubsort(vname, parent, child); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("ADDSTMT",18, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CREATESTMT ::= LOAD SQS POLICY IDENTIFIER 
            {
              Document RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.loadSQS(fname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CREATESTMT ::= LOAD XACML POLICY IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int sfnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sfnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String sfname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.loadXACML(fname, sfname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CREATESTMT ::= DELETE VOCABULARY IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.deleteVocabulary(vname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CREATESTMT ::= PREPARE IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.preparePolicy(pname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CREATESTMT ::= CREATE VOCABULARY IDENTIFIER 
            {
              Document RESULT =null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.createVocabulary(vname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CREATESTMT ::= CREATE POLICY SET IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.createPolicySet(pname, vname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CREATESTMT ::= CREATE POLICY LEAF IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int pnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int pnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String pname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.createPolicyLeaf(pname, vname); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("CREATESTMT",16, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RESULTSSTMT ::= SHOW UNPOPULATED NATURAL DBOPTINDEXLIST FOR CASES DBOPTINDEXLIST 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int rlistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int rlistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		Map<String,Set<List<String>>> rlist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int clistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> clist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showUnpopulated(id, rlist, clist); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RESULTSSTMT ::= SHOW POPULATED NATURAL DBOPTINDEXLIST FOR CASES DBOPTINDEXLIST 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int rlistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int rlistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		Map<String,Set<List<String>>> rlist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int clistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int clistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> clist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showPopulated(id, rlist, clist); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RESULTSSTMT ::= SHOW UNPOPULATED NATURAL DBOPTINDEXLIST 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int rlistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rlistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> rlist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showUnpopulated(id, rlist); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RESULTSSTMT ::= SHOW POPULATED NATURAL DBOPTINDEXLIST 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int rlistleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rlistright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Map<String,Set<List<String>>> rlist = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showPopulated(id, rlist); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RESULTSSTMT ::= SHOW NEXT COLLAPSE NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showNextCollapse(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RESULTSSTMT ::= SHOW CEILING NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showCeiling(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RESULTSSTMT ::= IS GUARANTEEDQMARK NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.isGuar(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RESULTSSTMT ::= IS POSSIBLEQMARK NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.isPoss(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RESULTSSTMT ::= COUNT NATURAL AT SIZE NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.countModels(id, n); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RESULTSSTMT ::= COUNT NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.countModels(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RESULTSSTMT ::= GET ONE NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getFirstModel(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RESULTSSTMT ::= SHOW ONE NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showFirstModel(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RESULTSSTMT ::= GET NEXT NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.getNextModel(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RESULTSSTMT ::= SHOW NEXT NATURAL 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.showNextModel(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RESULTSSTMT",19, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMPARESTMT ::= COMPARE IDENTIFIER IDENTIFIER IDBCLAUSE TUPLINGSWITCH DEBUGSWITCH CEILINGSWITCH 
            {
              Document RESULT =null;
		int pol1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).left;
		int pol1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).right;
		String pol1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).value;
		int pol2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int pol2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		String pol2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int idboutleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int idboutright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		Map<String,Set<List<String>>> idbout = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int tuplingleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int tuplingright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		Boolean tupling = (Boolean)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int debuglevelleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int debuglevelright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		Integer debuglevel = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int sizeceilingleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sizeceilingright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer sizeceiling = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.doCompare(pol1, pol2, 
				//outmod, 
				idbout, tupling, debuglevel, sizeceiling);  
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("COMPARESTMT",15, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RENAMESTMT ::= RENAME IDENTIFIER IDENTIFIER 
            {
              Document RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.renameIDBCollection(id1, id2); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("RENAMESTMT",13, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INFOSTMT ::= INFO 
            {
              Document RESULT =null;
		 RESULT = MEnvironment.printSystemInfo(); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("INFOSTMT",14, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INFOSTMT ::= INFO IDENTIFIER 
            {
              Document RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MEnvironment.printInfo(id); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("INFOSTMT",14, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // QUERY ::= EXPLORE CONDITION UNDERSTMT PUBLISHCLAUSE IDBCLAUSE TUPLINGSWITCH DEBUGSWITCH CEILINGSWITCH 
            {
              MQuery RESULT =null;
		int mpcleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)).left;
		int mpcright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)).right;
		MExploreCondition mpc = (MExploreCondition)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).right;
		List<String> u = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-5)).value;
		int publleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).left;
		int publright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).right;
		List<String> publ = (List<String>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-4)).value;
		int idboutleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).left;
		int idboutright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).right;
		Map<String,Set<List<String>>> idbout = (Map<String,Set<List<String>>>)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-3)).value;
		int tuplingleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).left;
		int tuplingright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).right;
		Boolean tupling = (Boolean)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-2)).value;
		int debuglevelleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int debuglevelright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		Integer debuglevel = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		int sizeceilingleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sizeceilingright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Integer sizeceiling = (Integer)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = MQuery.createFromExplore(
											 mpc.addSeenIDBCollections(parser.namesToIDBCollections(u)), 
		                                     publ, 
		                                     //outmod,
		                                     idbout,
		                                     tupling,
		                                     debuglevel,
		                                     sizeceiling); 
		                                     
		                                     
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("QUERY",0, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-7)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MARGRAVECOMMAND ::= QUIT 
            {
              Object RESULT =null;
		 RESULT = MEnvironment.quitMargrave(); 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MARGRAVECOMMAND ::= RESULTSSTMT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document r = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = r; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MARGRAVECOMMAND ::= GETSTMT 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document g = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = g; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MARGRAVECOMMAND ::= SETSTMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document s = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = s; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MARGRAVECOMMAND ::= ADDSTMT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document a = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = a; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MARGRAVECOMMAND ::= CREATESTMT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document c = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MARGRAVECOMMAND ::= COMPARESTMT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document c = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = c; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MARGRAVECOMMAND ::= RENAMESTMT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document r = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = r; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MARGRAVECOMMAND ::= INFOSTMT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		Document i = (Document)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = i; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MARGRAVECOMMAND ::= QUERY 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()).right;
		MQuery q = (MQuery)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.peek()).value;
		 RESULT = q; 
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("MARGRAVECOMMAND",21, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          return CUP$MCommandParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MARGRAVECOMMAND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)).value;
		RESULT = start_val;
              CUP$MCommandParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.elementAt(CUP$MCommandParser$top-1)), ((java_cup.runtime.Symbol)CUP$MCommandParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MCommandParser$parser.done_parsing();
          return CUP$MCommandParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

