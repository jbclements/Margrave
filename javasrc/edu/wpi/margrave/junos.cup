/*
  	Copyright 2009-2010 Brown University and Worcester Polytechnic Institute.
    
    This file is part of Margrave.

    Margrave is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Margrave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Margrave.  If not, see <http://www.gnu.org/licenses/>.
 */


package edu.wpi.margrave;

import java_cup.runtime.*;
import kodkod.ast.*;
import java.io.*;

parser code {:


public void report_fatal_error(String message, Object info)
throws Exception
{
	System.err.println(message);
	if(info instanceof Symbol)
	{
		Symbol tok = (Symbol)info;

		// Don't try to recover. Just report the error to the user.
		// Docs say line# = cur_token.left 
		//          col# = cur_token.right

		throw new MParserException(tok.left,
				tok.right, tok.value);
	}

	
	super.report_fatal_error(message, info);
}

protected PrintStream errorStream = System.err;
protected MREPL environment = null;

public void setEnvironment(MREPL environment)
{
	this.environment = environment;
}

public void setErrorStream(PrintStream errorStream)
{
	this.errorStream = errorStream;
}

:}

/* Preliminaries to set up and use the scanner.  */
init with {: /* No longer an init method? */           :};
scan with {: return getScanner().next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal	VERSION, POLICYOPTIONS, POLICYSTATEMENT, TERM, FROM, THEN,
                FAMILY, FILTER, FIREWALL, GROUPS, PREFIXLIST, NEXTHEADER, 
                SOURCEPREFIXLIST, DESTINATIONPREFIXLIST, DESTINATIONADDRESS,
                SOURCEADDRESS, DESTINATIONPORT, SOURCEPORT, PROTOCOL, 
                INTERFACE, LOCALPREFERENCE, ASPATH, COMMUNITY, APPLYGROUPS,
                ROUTEFILTER, PREFIXLISTFILTER, NEXTHOP, ORLONGER, 
                REJECT, ACCEPT, COUNT, DISCARD, LOG, LBRACE, RBRACE,
                RBRACKET, LBRACKET, SEMICOLON;

                    
terminal        String		IDENTIFIER;
terminal        String		IPV4;
terminal        String		IPV6;
terminal        String		COMMENT;


/* Non-terminals */

non terminal    MJConfig  	      JUNOSCONFIG;

non terminal    Map<String, MJConfigBlock>   JUNOSGROUPS;
non terminal    MJPolicyOptions       JUNOSPOLICYOPTIONS;
non terminal    MJFirewall	      JUNOSFIREWALL;

/* A group can be a Firewall or PolicyOptions (probably more) */

non terminal    Map<String, MJConfigBlock>         JUNOSGROUP;
non terminal    Map<String, MJConfigBlock>      JUNOSGROUPLIST;


/* The grammar */


/* ************************************************************ */

JUNOSCONFIG ::=	
                VERSION	IDENTIFIER:verid
                JUNOSGROUPS:jgroups 
                JUNOSPOLICYOPTIONS:jpolicyoptions
                JUNOSFIREWALL:jfirewall
		{: RESULT = new MJConfig(verid, jgroups, jpolicyoptions, jfirewall); :}		
		;

/* ************************************************************ */
		
JUNOSGROUPS ::= 
		GROUPS LBRACE JUNOSGROUPLIST:jgl RBRACE
		{: RESULT = jgl; :}
		;

JUNOSGROUPLIST ::= 
		JUNOSGROUP:jg
		{: RESULT = jg; :}
		|
		JUNOSGROUPLIST:jgl JUNOSGROUP:jg
		{: RESULT = jgl; RESULT.putAll(jg); :}
		;


/* There are probably more valid options here */

JUNOSGROUP ::= 
		IDENTIFIER:groupname LBRACE JUNOSPOLICYOPTIONS:jpo RBRACE
		{: RESULT = new HashMap<String, MJConfigBlock>(); RESULT.put(groupname, jpo); :}		
		|
		IDENTIFIER:groupname LBRACE JUNOSFIREWALL:jf RBRACE
		{: RESULT = new HashMap<String, MJConfigBlock>(); RESULT.put(groupname, jf); :}		
		;
		
/* ************************************************************ */		

JUNOSPOLICYOPTIONS ::= POLICYOPTIONS LBRACE RBRACE

		;
		
		
to verify

pol options is a list of pol statements (order doesnt matter)
pol statements have a name and are a list of terms (order matters?)

firewall = set of familys
family = name and list of filter statements w/ names
filter = list of terms w/ names


		



JUNOSFIREWALL ::= FIREWALL LBRACE RBRACE

		;

/* ************************************************************ */

/* ************************************************************ */