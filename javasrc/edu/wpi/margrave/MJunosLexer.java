/* The following code was generated by JFlex 1.4.3 on 6/10/10 7:20 PM */


/*
  	Copyright 2009-2010 Brown University and Worcester Polytechnic Institute.
    
    This file is part of Margrave.

    Margrave is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Margrave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Margrave.  If not, see <http://www.gnu.org/licenses/>.
 */


package a;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/10/10 7:20 PM from the specification file
 * <tt>F:/workspace/Margrave/src/edu/wpi/margrave/junos.jflex</tt>
 */
class MJunosLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\5\2\0\1\1\22\0\1\1\2\0\1\4\6\0"+
    "\1\2\2\0\1\34\1\17\1\3\2\15\1\7\1\14\1\10\1\16"+
    "\1\6\3\11\1\13\1\54\1\20\1\0\1\20\2\0\1\36\1\12"+
    "\1\32\1\46\1\22\1\40\1\43\1\41\1\25\1\47\1\20\1\31"+
    "\1\37\1\27\1\26\1\30\1\20\1\23\1\24\1\35\1\44\1\21"+
    "\1\42\1\45\1\33\1\20\1\52\1\0\1\53\1\0\1\20\1\0"+
    "\1\36\1\12\1\32\1\46\1\22\1\40\1\43\1\41\1\25\1\47"+
    "\1\20\1\31\1\37\1\27\1\26\1\30\1\20\1\23\1\24\1\35"+
    "\1\44\1\21\1\42\1\45\1\33\1\20\1\50\1\0\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\22\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\0\1\11\2\3\1\0\31\3"+
    "\1\0\1\3\1\0\17\3\1\12\16\3\1\11\1\3"+
    "\2\0\20\3\1\13\1\14\3\3\1\15\6\3\2\0"+
    "\17\3\1\16\11\3\3\0\4\3\1\17\14\3\1\20"+
    "\1\3\1\21\1\22\1\23\2\3\2\0\3\3\1\24"+
    "\13\3\1\25\3\3\1\26\4\0\6\3\1\27\1\3"+
    "\1\30\1\3\1\31\5\3\1\32\1\3\2\0\3\33"+
    "\4\3\1\34\5\3\1\35\2\3\1\0\3\36\15\3"+
    "\1\37\1\3\1\40\1\41\5\3\1\42\6\3\1\43"+
    "\12\3\1\44\2\3\1\45\15\3\1\46\1\47\1\3"+
    "\1\50\5\3\1\51\1\52\3\3\1\53\3\3\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\207\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\55\0\55\0\55\0\55\0\55\0\u040b\0\u0438\0\u0465"+
    "\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\132\0\u0c7b\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10"+
    "\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\55\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\132\0\132\0\u1248\0\u1275\0\u12a2\0\132\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\132\0\u16da\0\u1707"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f"+
    "\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\132\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\132\0\u1bc6\0\132\0\132\0\132"+
    "\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\132"+
    "\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69"+
    "\0\u1e96\0\u1ec3\0\u1ef0\0\132\0\u1f1d\0\u1f4a\0\u1f77\0\132"+
    "\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df"+
    "\0\u210c\0\u2139\0\132\0\u2166\0\132\0\u2193\0\132\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\132\0\u22a1\0\u22ce\0\u22fb"+
    "\0\55\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\132"+
    "\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\132\0\u2517\0\u2544"+
    "\0\u2571\0\u259e\0\u25cb\0\55\0\u25f8\0\u2625\0\u2652\0\u267f"+
    "\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7"+
    "\0\u2814\0\132\0\u2841\0\132\0\u286e\0\u289b\0\u28c8\0\u28f5"+
    "\0\u2922\0\u294f\0\132\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30"+
    "\0\u2a5d\0\132\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b"+
    "\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\132\0\u2c4c\0\u2c79\0\132"+
    "\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1"+
    "\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\132\0\132\0\u2eef"+
    "\0\132\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\132\0\132"+
    "\0\u2ffd\0\u302a\0\u3057\0\132\0\u3084\0\u30b1\0\u30de\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\2\7\1\11\1\2\1\7\1\12\1\7\2\4\1\13"+
    "\1\11\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\2\4\1\24\1\25\1\4\1\26\2\4\1\27"+
    "\2\4\1\30\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\57\0\1\4\3\0\5\4\1\0\34\4\7\0\1\36"+
    "\56\0\1\37\52\0\1\4\3\0\4\40\1\41\1\42"+
    "\3\40\1\43\2\4\1\41\7\4\1\41\3\4\1\41"+
    "\1\4\1\41\5\4\1\41\1\4\7\0\1\4\3\0"+
    "\1\40\2\44\1\40\1\41\1\42\2\44\1\45\1\43"+
    "\2\4\1\41\7\4\1\41\3\4\1\41\1\4\1\41"+
    "\5\4\1\41\1\4\7\0\1\4\3\0\5\41\1\42"+
    "\3\41\3\4\1\41\7\4\1\41\3\4\1\41\1\4"+
    "\1\41\5\4\1\41\1\4\7\0\1\4\3\0\4\44"+
    "\1\41\1\42\3\44\1\43\2\4\1\41\7\4\1\41"+
    "\3\4\1\41\1\4\1\41\5\4\1\41\1\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\46\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\47\3\4\1\50"+
    "\21\4\7\0\1\4\3\0\5\4\1\0\12\4\1\51"+
    "\21\4\7\0\1\4\3\0\5\4\1\0\13\4\1\52"+
    "\20\4\7\0\1\4\3\0\5\4\1\0\7\4\1\53"+
    "\24\4\7\0\1\4\3\0\5\4\1\0\6\4\1\54"+
    "\25\4\7\0\1\4\3\0\5\4\1\0\7\4\1\55"+
    "\2\4\1\56\21\4\7\0\1\4\3\0\5\4\1\0"+
    "\12\4\1\57\21\4\7\0\1\4\3\0\5\41\1\42"+
    "\3\41\3\4\1\41\3\4\1\60\3\4\1\41\3\4"+
    "\1\41\1\4\1\41\5\4\1\41\1\4\7\0\1\4"+
    "\3\0\5\4\1\0\6\4\1\61\16\4\1\62\6\4"+
    "\7\0\1\4\3\0\5\41\1\42\3\41\3\4\1\41"+
    "\1\4\1\63\3\4\1\64\1\4\1\65\3\4\1\41"+
    "\1\4\1\41\5\4\1\41\1\4\7\0\1\4\3\0"+
    "\5\41\1\42\3\41\3\4\1\41\1\66\1\4\1\67"+
    "\4\4\1\41\3\4\1\70\1\4\1\41\5\4\1\41"+
    "\1\4\7\0\1\4\3\0\5\4\1\0\7\4\1\71"+
    "\24\4\7\0\1\4\3\0\5\41\1\42\3\41\3\4"+
    "\1\72\2\4\1\73\4\4\1\41\3\4\1\41\1\4"+
    "\1\41\5\4\1\41\1\4\5\0\2\36\1\74\52\36"+
    "\5\37\1\0\47\37\2\0\1\4\3\0\5\75\1\42"+
    "\3\75\1\43\2\4\1\75\7\4\1\75\3\4\1\75"+
    "\1\4\1\75\5\4\1\75\1\4\7\0\1\4\3\0"+
    "\5\75\1\42\3\75\3\4\1\75\7\4\1\75\3\4"+
    "\1\75\1\4\1\75\5\4\1\75\1\4\13\0\5\76"+
    "\1\0\3\76\3\0\1\76\7\0\1\76\3\0\1\76"+
    "\1\0\1\76\5\0\1\76\10\0\1\4\3\0\1\77"+
    "\1\100\2\77\1\4\1\0\1\77\1\101\1\77\31\4"+
    "\7\0\1\4\3\0\4\102\1\75\1\42\3\102\1\43"+
    "\2\4\1\75\7\4\1\75\3\4\1\75\1\4\1\75"+
    "\5\4\1\75\1\4\7\0\1\4\3\0\1\75\2\102"+
    "\2\75\1\42\3\102\1\43\2\4\1\75\7\4\1\75"+
    "\3\4\1\75\1\4\1\75\5\4\1\75\1\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\103\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\33\4\1\104\7\0\1\4"+
    "\3\0\5\4\1\0\30\4\1\105\3\4\7\0\1\4"+
    "\3\0\5\4\1\0\30\4\1\106\3\4\7\0\1\4"+
    "\3\0\5\4\1\0\21\4\1\107\12\4\7\0\1\4"+
    "\3\0\5\4\1\0\15\4\1\110\16\4\7\0\1\4"+
    "\3\0\5\4\1\0\31\4\1\111\2\4\7\0\1\4"+
    "\3\0\5\4\1\0\6\4\1\112\3\4\1\113\21\4"+
    "\7\0\1\4\3\0\5\4\1\0\15\4\1\114\16\4"+
    "\7\0\1\4\3\0\5\4\1\0\16\4\1\115\10\4"+
    "\1\116\4\4\7\0\1\4\3\0\5\4\1\0\23\4"+
    "\1\117\4\4\1\120\3\4\7\0\1\4\3\0\5\4"+
    "\1\0\7\4\1\121\24\4\7\0\1\4\3\0\5\4"+
    "\1\0\6\4\1\122\25\4\7\0\1\4\3\0\5\4"+
    "\1\0\20\4\1\123\13\4\7\0\1\4\3\0\5\4"+
    "\1\0\14\4\1\124\17\4\7\0\1\4\3\0\5\75"+
    "\1\42\3\75\3\4\1\75\7\4\1\125\3\4\1\75"+
    "\1\4\1\75\5\4\1\75\1\4\7\0\1\4\3\0"+
    "\5\4\1\0\12\4\1\126\21\4\7\0\1\4\3\0"+
    "\5\4\1\0\7\4\1\127\5\4\1\130\16\4\7\0"+
    "\1\4\3\0\5\75\1\42\3\75\3\4\1\75\7\4"+
    "\1\75\3\4\1\75\1\131\1\75\5\4\1\75\1\4"+
    "\7\0\1\4\3\0\5\4\1\0\12\4\1\132\21\4"+
    "\7\0\1\4\3\0\5\75\1\42\3\75\3\4\1\75"+
    "\1\4\1\133\5\4\1\75\3\4\1\75\1\4\1\75"+
    "\5\4\1\75\1\4\7\0\1\4\3\0\5\4\1\0"+
    "\10\4\1\134\23\4\5\0\2\36\1\74\1\135\51\36"+
    "\2\0\1\4\3\0\5\136\1\42\3\136\3\4\1\136"+
    "\7\4\1\136\3\4\1\136\1\4\1\136\5\4\1\136"+
    "\1\4\13\0\5\137\1\140\3\137\3\0\1\137\7\0"+
    "\1\137\3\0\1\137\1\0\1\137\5\0\1\137\10\0"+
    "\1\4\3\0\4\141\1\4\1\0\3\141\1\142\30\4"+
    "\7\0\1\4\3\0\1\141\2\77\1\141\1\4\1\0"+
    "\2\77\1\143\1\142\30\4\7\0\1\4\3\0\4\77"+
    "\1\4\1\0\3\77\1\142\30\4\7\0\1\4\3\0"+
    "\5\136\1\42\3\136\1\43\2\4\1\136\7\4\1\136"+
    "\3\4\1\136\1\4\1\136\5\4\1\136\1\4\7\0"+
    "\1\4\3\0\5\4\1\0\10\4\1\144\23\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\145\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\146\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\147\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\150\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\12\4\1\151\21\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\152\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\24\4\1\153\7\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\154\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\11\4\1\155\22\4\7\0"+
    "\1\4\3\0\5\4\1\0\22\4\1\156\11\4\7\0"+
    "\1\4\3\0\5\4\1\0\23\4\1\157\10\4\7\0"+
    "\1\4\3\0\5\4\1\0\13\4\1\160\20\4\7\0"+
    "\1\4\3\0\5\4\1\0\23\4\1\161\10\4\7\0"+
    "\1\4\3\0\5\4\1\0\13\4\1\162\20\4\7\0"+
    "\1\4\3\0\5\4\1\0\14\4\1\163\17\4\7\0"+
    "\1\4\3\0\5\4\1\0\15\4\1\164\16\4\7\0"+
    "\1\4\3\0\5\136\1\42\3\136\3\4\1\165\7\4"+
    "\1\136\3\4\1\136\1\4\1\136\5\4\1\136\1\4"+
    "\7\0\1\4\3\0\5\4\1\0\23\4\1\166\10\4"+
    "\7\0\1\4\3\0\5\4\1\0\6\4\1\167\25\4"+
    "\7\0\1\4\3\0\5\4\1\0\21\4\1\170\12\4"+
    "\7\0\1\4\3\0\5\4\1\0\11\4\1\171\22\4"+
    "\7\0\1\4\3\0\5\4\1\0\30\4\1\172\3\4"+
    "\7\0\1\4\3\0\5\4\1\0\21\4\1\173\12\4"+
    "\7\0\1\4\3\0\5\4\1\0\16\4\1\174\15\4"+
    "\7\0\1\4\3\0\5\4\1\42\34\4\13\0\5\175"+
    "\1\140\3\175\3\0\1\175\7\0\1\175\3\0\1\175"+
    "\1\0\1\175\5\0\1\175\14\0\5\176\1\0\3\176"+
    "\3\0\1\176\7\0\1\176\3\0\1\176\1\0\1\176"+
    "\5\0\1\176\10\0\1\4\3\0\5\4\1\0\3\4"+
    "\1\142\30\4\7\0\1\4\3\0\1\177\1\200\2\177"+
    "\1\4\1\0\1\177\1\201\1\177\31\4\7\0\1\4"+
    "\3\0\1\4\2\141\2\4\1\0\3\141\1\142\30\4"+
    "\7\0\1\4\3\0\5\4\1\0\11\4\1\202\22\4"+
    "\7\0\1\4\3\0\5\4\1\0\16\4\1\203\15\4"+
    "\7\0\1\4\3\0\5\4\1\0\6\4\1\204\25\4"+
    "\7\0\1\4\3\0\5\4\1\0\16\4\1\205\15\4"+
    "\7\0\1\4\3\0\5\4\1\0\7\4\1\206\24\4"+
    "\7\0\1\4\3\0\5\4\1\0\13\4\1\207\20\4"+
    "\7\0\1\4\3\0\5\4\1\0\20\4\1\210\13\4"+
    "\7\0\1\4\3\0\5\4\1\0\11\4\1\211\22\4"+
    "\7\0\1\4\3\0\5\4\1\0\12\4\1\212\21\4"+
    "\7\0\1\4\3\0\5\4\1\0\16\4\1\213\15\4"+
    "\7\0\1\4\3\0\5\4\1\0\15\4\1\214\16\4"+
    "\7\0\1\4\3\0\5\4\1\0\30\4\1\215\3\4"+
    "\7\0\1\4\3\0\5\4\1\0\21\4\1\216\12\4"+
    "\7\0\1\4\3\0\5\4\1\0\22\4\1\217\11\4"+
    "\7\0\1\4\3\0\5\4\1\0\17\4\1\220\14\4"+
    "\7\0\1\4\3\0\5\4\1\42\14\4\1\221\17\4"+
    "\7\0\1\4\3\0\5\4\1\0\26\4\1\222\5\4"+
    "\7\0\1\4\3\0\5\4\1\0\6\4\1\223\25\4"+
    "\7\0\1\4\3\0\5\4\1\0\15\4\1\224\16\4"+
    "\7\0\1\4\3\0\5\4\1\0\14\4\1\225\17\4"+
    "\7\0\1\4\3\0\5\4\1\0\11\4\1\226\22\4"+
    "\7\0\1\4\3\0\5\4\1\0\22\4\1\227\11\4"+
    "\13\0\5\230\1\140\3\230\3\0\1\230\7\0\1\230"+
    "\3\0\1\230\1\0\1\230\5\0\1\230\14\0\5\231"+
    "\1\232\3\231\3\0\1\231\7\0\1\231\3\0\1\231"+
    "\1\0\1\231\5\0\1\231\10\0\1\4\3\0\4\233"+
    "\1\4\1\0\3\233\1\234\30\4\7\0\1\4\3\0"+
    "\1\233\2\177\1\233\1\4\1\0\2\177\1\235\1\234"+
    "\30\4\7\0\1\4\3\0\4\177\1\4\1\0\3\177"+
    "\1\234\30\4\7\0\1\4\3\0\5\4\1\0\12\4"+
    "\1\236\21\4\7\0\1\4\3\0\5\4\1\0\21\4"+
    "\1\237\12\4\7\0\1\4\3\0\5\4\1\0\20\4"+
    "\1\240\13\4\7\0\1\4\3\0\5\4\1\0\6\4"+
    "\1\241\25\4\7\0\1\4\3\0\5\4\1\0\24\4"+
    "\1\242\7\4\7\0\1\4\3\0\5\4\1\0\27\4"+
    "\1\243\4\4\7\0\1\4\3\0\5\4\1\0\25\4"+
    "\1\244\6\4\7\0\1\4\3\0\5\4\1\0\31\4"+
    "\1\245\2\4\7\0\1\4\3\0\5\4\1\0\16\4"+
    "\1\246\15\4\7\0\1\4\3\0\5\4\1\0\17\4"+
    "\1\247\14\4\7\0\1\4\3\0\5\4\1\0\20\4"+
    "\1\250\13\4\7\0\1\4\3\0\5\4\1\0\13\4"+
    "\1\251\20\4\7\0\1\4\3\0\5\4\1\0\21\4"+
    "\1\252\12\4\7\0\1\4\3\0\5\4\1\0\20\4"+
    "\1\253\13\4\7\0\1\4\3\0\5\4\1\0\21\4"+
    "\1\254\12\4\7\0\1\4\3\0\5\4\1\0\22\4"+
    "\1\255\11\4\7\0\1\4\3\0\5\4\1\0\7\4"+
    "\1\256\24\4\7\0\1\4\3\0\5\4\1\0\17\4"+
    "\1\257\14\4\7\0\1\4\3\0\5\4\1\0\10\4"+
    "\1\260\23\4\7\0\1\4\3\0\5\4\1\0\13\4"+
    "\1\261\20\4\7\0\1\4\3\0\5\4\1\0\7\4"+
    "\1\262\24\4\20\0\1\140\47\0\5\263\1\232\3\263"+
    "\3\0\1\263\7\0\1\263\3\0\1\263\1\0\1\263"+
    "\5\0\1\263\14\0\5\264\1\0\3\264\3\0\1\264"+
    "\7\0\1\264\3\0\1\264\1\0\1\264\5\0\1\264"+
    "\10\0\1\4\3\0\5\4\1\0\3\4\1\234\30\4"+
    "\7\0\1\4\3\0\1\265\1\266\2\265\1\4\1\0"+
    "\1\265\1\267\1\265\31\4\7\0\1\4\3\0\1\4"+
    "\2\233\2\4\1\0\3\233\1\234\30\4\7\0\1\4"+
    "\3\0\5\4\1\0\13\4\1\270\20\4\7\0\1\4"+
    "\3\0\5\4\1\0\24\4\1\271\7\4\7\0\1\4"+
    "\3\0\5\4\1\0\20\4\1\272\13\4\7\0\1\4"+
    "\3\0\5\4\1\0\22\4\1\273\11\4\7\0\1\4"+
    "\3\0\5\4\1\0\6\4\1\274\25\4\7\0\1\4"+
    "\3\0\5\4\1\0\6\4\1\275\3\4\1\276\21\4"+
    "\7\0\1\4\3\0\5\4\1\0\20\4\1\277\13\4"+
    "\7\0\1\4\3\0\5\4\1\0\12\4\1\300\21\4"+
    "\7\0\1\4\3\0\5\4\1\0\20\4\1\301\13\4"+
    "\7\0\1\4\3\0\5\4\1\0\14\4\1\302\17\4"+
    "\7\0\1\4\3\0\5\4\1\0\11\4\1\303\22\4"+
    "\7\0\1\4\3\0\5\4\1\0\25\4\1\304\6\4"+
    "\7\0\1\4\3\0\5\4\1\0\27\4\1\305\4\4"+
    "\7\0\1\4\3\0\5\4\1\0\15\4\1\306\16\4"+
    "\7\0\1\4\3\0\5\4\1\0\22\4\1\307\11\4"+
    "\7\0\1\4\3\0\5\4\1\0\32\4\1\310\1\4"+
    "\13\0\5\311\1\232\3\311\3\0\1\311\7\0\1\311"+
    "\3\0\1\311\1\0\1\311\5\0\1\311\14\0\5\312"+
    "\1\313\3\312\3\0\1\312\7\0\1\312\3\0\1\312"+
    "\1\0\1\312\5\0\1\312\10\0\1\4\1\314\2\0"+
    "\4\315\1\4\1\0\3\315\31\4\7\0\1\4\1\314"+
    "\2\0\1\315\2\265\1\315\1\4\1\0\2\265\1\316"+
    "\31\4\7\0\1\4\1\314\2\0\4\265\1\4\1\0"+
    "\3\265\31\4\7\0\1\4\3\0\5\4\1\0\11\4"+
    "\1\317\22\4\7\0\1\4\3\0\5\4\1\0\14\4"+
    "\1\320\5\4\1\321\11\4\7\0\1\4\3\0\5\4"+
    "\1\0\16\4\1\322\15\4\7\0\1\4\3\0\5\4"+
    "\1\0\7\4\1\323\24\4\7\0\1\4\3\0\5\4"+
    "\1\0\22\4\1\324\11\4\7\0\1\4\3\0\5\4"+
    "\1\0\14\4\1\325\17\4\7\0\1\4\3\0\5\4"+
    "\1\0\15\4\1\326\16\4\7\0\1\4\3\0\5\4"+
    "\1\0\15\4\1\327\16\4\7\0\1\4\3\0\5\4"+
    "\1\0\10\4\1\330\1\4\1\331\21\4\7\0\1\4"+
    "\3\0\5\4\1\0\7\4\1\332\24\4\7\0\1\4"+
    "\3\0\5\4\1\0\21\4\1\333\12\4\7\0\1\4"+
    "\3\0\5\4\1\0\7\4\1\334\24\4\7\0\1\4"+
    "\3\0\5\4\1\0\15\4\1\335\16\4\7\0\1\4"+
    "\3\0\5\4\1\0\21\4\1\336\12\4\20\0\1\232"+
    "\47\0\5\337\1\313\3\337\3\0\1\337\7\0\1\337"+
    "\3\0\1\337\1\0\1\337\5\0\1\337\21\0\1\340"+
    "\47\0\1\341\1\342\2\341\2\0\1\343\1\342\1\341"+
    "\40\0\1\4\1\314\2\0\5\4\1\0\34\4\7\0"+
    "\1\4\1\314\2\0\1\4\2\315\2\4\1\0\3\315"+
    "\31\4\7\0\1\4\3\0\5\4\1\0\15\4\1\344"+
    "\16\4\7\0\1\4\3\0\5\4\1\0\7\4\1\345"+
    "\2\4\1\346\21\4\7\0\1\4\3\0\5\4\1\0"+
    "\32\4\1\347\1\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\350\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\32\4\1\351\1\4\7\0\1\4\3\0\5\4\1\0"+
    "\11\4\1\352\22\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\353\12\4\7\0\1\4\3\0\5\4\1\0"+
    "\14\4\1\354\17\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\355\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\17\4\1\356\14\4\7\0\1\4\3\0\5\4\1\0"+
    "\12\4\1\357\21\4\7\0\1\4\3\0\5\4\1\0"+
    "\11\4\1\360\22\4\13\0\5\361\1\313\3\361\3\0"+
    "\1\361\7\0\1\361\3\0\1\361\1\0\1\361\5\0"+
    "\1\361\14\0\1\362\2\363\1\364\2\0\3\363\44\0"+
    "\4\341\2\0\3\341\53\0\1\341\41\0\1\4\3\0"+
    "\5\4\1\0\21\4\1\365\12\4\7\0\1\4\3\0"+
    "\5\4\1\0\6\4\1\366\25\4\7\0\1\4\3\0"+
    "\5\4\1\0\7\4\1\367\24\4\7\0\1\4\3\0"+
    "\5\4\1\0\32\4\1\370\1\4\7\0\1\4\3\0"+
    "\5\4\1\0\6\4\1\371\25\4\7\0\1\4\3\0"+
    "\5\4\1\0\10\4\1\372\23\4\7\0\1\4\3\0"+
    "\5\4\1\0\22\4\1\373\11\4\7\0\1\4\3\0"+
    "\5\4\1\0\21\4\1\374\12\4\7\0\1\4\3\0"+
    "\5\4\1\0\24\4\1\375\7\4\7\0\1\4\3\0"+
    "\5\4\1\0\30\4\1\376\3\4\7\0\1\4\3\0"+
    "\5\4\1\0\12\4\1\377\21\4\20\0\1\313\50\0"+
    "\1\364\4\0\2\364\45\0\4\364\2\0\3\364\40\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\u0100\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\24\4\1\u0101\7\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\u0102\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\u0103\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\u0104\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\u0105\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\21\4\1\u0106\12\4\7\0"+
    "\1\4\3\0\5\4\1\0\11\4\1\u0107\22\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\u0108\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\14\4\1\u0109\17\4\7\0"+
    "\1\4\3\0\5\4\1\0\13\4\1\u010a\20\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\u010b\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\11\4\1\u010c\22\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\u010d\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\20\4\1\u010e\13\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\u010f\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\12\4\1\u0110\21\4\7\0"+
    "\1\4\3\0\5\4\1\0\7\4\1\u0111\24\4\7\0"+
    "\1\4\3\0\5\4\1\0\10\4\1\u0112\23\4\7\0"+
    "\1\4\3\0\5\4\1\0\20\4\1\u0113\13\4\7\0"+
    "\1\4\3\0\5\4\1\0\31\4\1\u0114\2\4\7\0"+
    "\1\4\3\0\5\4\1\0\10\4\1\u0115\23\4\7\0"+
    "\1\4\3\0\5\4\1\0\24\4\1\u0116\7\4\7\0"+
    "\1\4\3\0\5\4\1\0\23\4\1\u0117\10\4\7\0"+
    "\1\4\3\0\5\4\1\0\13\4\1\u0118\20\4\7\0"+
    "\1\4\3\0\5\4\1\0\6\4\1\u0119\25\4\7\0"+
    "\1\4\3\0\5\4\1\0\14\4\1\u011a\5\4\1\u011b"+
    "\11\4\7\0\1\4\3\0\5\4\1\0\20\4\1\u011c"+
    "\13\4\7\0\1\4\3\0\5\4\1\0\10\4\1\u011d"+
    "\23\4\7\0\1\4\3\0\5\4\1\0\11\4\1\u011e"+
    "\22\4\7\0\1\4\3\0\5\4\1\0\6\4\1\u011f"+
    "\25\4\7\0\1\4\3\0\5\4\1\0\10\4\1\u0120"+
    "\23\4\7\0\1\4\3\0\5\4\1\0\13\4\1\u0121"+
    "\20\4\7\0\1\4\3\0\5\4\1\0\7\4\1\u0122"+
    "\2\4\1\u0123\21\4\7\0\1\4\3\0\5\4\1\0"+
    "\32\4\1\u0124\1\4\7\0\1\4\3\0\5\4\1\0"+
    "\15\4\1\u0125\16\4\7\0\1\4\3\0\5\4\1\0"+
    "\15\4\1\u0126\16\4\7\0\1\4\3\0\5\4\1\0"+
    "\13\4\1\u0127\20\4\7\0\1\4\3\0\5\4\1\0"+
    "\16\4\1\u0128\15\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\u0129\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\7\4\1\u012a\24\4\7\0\1\4\3\0\5\4\1\0"+
    "\32\4\1\u012b\1\4\7\0\1\4\3\0\5\4\1\0"+
    "\11\4\1\u012c\22\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\u012d\12\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\u012e\12\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\u012f\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\24\4\1\u0130\7\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\u0131\12\4\7\0\1\4\3\0\5\4\1\0"+
    "\7\4\1\u0132\24\4\7\0\1\4\3\0\5\4\1\0"+
    "\10\4\1\u0133\23\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\u0134\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\11\4\1\u0135\22\4\7\0\1\4\3\0\5\4\1\0"+
    "\6\4\1\u0136\25\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\u0137\12\4\7\0\1\4\3\0\5\4\1\0"+
    "\7\4\1\u0138\24\4\7\0\1\4\3\0\5\4\1\0"+
    "\31\4\1\u0139\2\4\7\0\1\4\3\0\5\4\1\0"+
    "\10\4\1\u013a\23\4\7\0\1\4\3\0\5\4\1\0"+
    "\20\4\1\u013b\13\4\7\0\1\4\3\0\5\4\1\0"+
    "\10\4\1\u013c\23\4\7\0\1\4\3\0\5\4\1\0"+
    "\15\4\1\u013d\16\4\7\0\1\4\3\0\5\4\1\0"+
    "\11\4\1\u013e\22\4\7\0\1\4\3\0\5\4\1\0"+
    "\10\4\1\u013f\23\4\7\0\1\4\3\0\5\4\1\0"+
    "\21\4\1\u0140\12\4\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\5\11\1\0\3\1\1\0\31\1"+
    "\1\0\1\1\1\0\36\1\1\11\1\1\2\0\34\1"+
    "\2\0\31\1\3\0\30\1\2\0\24\1\4\0\22\1"+
    "\2\0\1\11\17\1\1\0\2\1\1\11\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

Symbol newSym(int tokenId) 
{
    return new Symbol(tokenId, yyline, yycolumn);
}

Symbol newSym(int tokenId, Object value) 
{
    return new Symbol(tokenId, yyline, yycolumn, value);
}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MJunosLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MJunosLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return newSym(MJunosSym.POLICYSTATEMENT);
          }
        case 45: break;
        case 39: 
          { return newSym(MJunosSym.LOCALPREFERENCE);
          }
        case 46: break;
        case 5: 
          { return newSym(MJunosSym.RBRACE);
          }
        case 47: break;
        case 12: 
          { return newSym(MJunosSym.THEN);
          }
        case 48: break;
        case 40: 
          { return newSym(MJunosSym.DESTINATIONPORT);
          }
        case 49: break;
        case 15: 
          { return newSym(MJunosSym.REJECT);
          }
        case 50: break;
        case 43: 
          { return newSym(MJunosSym.DESTINATIONADDRESS);
          }
        case 51: break;
        case 29: 
          { return newSym(MJunosSym.COMMUNITY);
          }
        case 52: break;
        case 17: 
          { return newSym(MJunosSym.FILTER);
          }
        case 53: break;
        case 19: 
          { return newSym(MJunosSym.GROUP);
          }
        case 54: break;
        case 25: 
          { return newSym(MJunosSym.PROTOCOL);
          }
        case 55: break;
        case 9: 
          { return newSym(MJunosSym.COMMENT, yytext());
          }
        case 56: break;
        case 34: 
          { return newSym(MJunosSym.ROUTEFILTER);
          }
        case 57: break;
        case 1: 
          { throw new MLexerException("Could not start a new lexical token.", yycolumn, yyline, yychar, yytext());
          }
        case 58: break;
        case 10: 
          { return newSym(MJunosSym.LOG);
          }
        case 59: break;
        case 28: 
          { return newSym(MJunosSym.INTERFACE);
          }
        case 60: break;
        case 6: 
          { return newSym(MJunosSym.LBRACKET);
          }
        case 61: break;
        case 35: 
          { return newSym(MJunosSym.APPLYGROUPS);
          }
        case 62: break;
        case 23: 
          { return newSym(MJunosSym.ORLONGER);
          }
        case 63: break;
        case 13: 
          { return newSym(MJunosSym.FROM);
          }
        case 64: break;
        case 11: 
          { return newSym(MJunosSym.TERM);
          }
        case 65: break;
        case 27: 
          { return newSym(MJunosSym.IPV4, yytext().toLowerCase());
          }
        case 66: break;
        case 3: 
          { return newSym(MJunosSym.IDENTIFIER, yytext().toLowerCase());
          }
        case 67: break;
        case 21: 
          { return newSym(MJunosSym.ASPATH);
          }
        case 68: break;
        case 37: 
          { return newSym(MJunosSym.POLICYOPTIONS);
          }
        case 69: break;
        case 16: 
          { return newSym(MJunosSym.ACCEPT);
          }
        case 70: break;
        case 33: 
          { return newSym(MJunosSym.PREFIXLIST);
          }
        case 71: break;
        case 2: 
          { /* Ignore whitespace */
          }
        case 72: break;
        case 7: 
          { return newSym(MJunosSym.RBRACKET);
          }
        case 73: break;
        case 4: 
          { return newSym(MJunosSym.LBRACE);
          }
        case 74: break;
        case 8: 
          { return newSym(MJunosSym.SEMICOLON);
          }
        case 75: break;
        case 14: 
          { return newSym(MJunosSym.COUNT);
          }
        case 76: break;
        case 32: 
          { return newSym(MJunosSym.NEXTHEADER);
          }
        case 77: break;
        case 18: 
          { return newSym(MJunosSym.FAMILY);
          }
        case 78: break;
        case 22: 
          { return newSym(MJunosSym.DISCARD);
          }
        case 79: break;
        case 31: 
          { return newSym(MJunosSym.SOURCEPORT);
          }
        case 80: break;
        case 30: 
          { return newSym(MJunosSym.IPV6, yytext().toLowerCase());
          }
        case 81: break;
        case 20: 
          { return newSym(MJunosSym.VERSION);
          }
        case 82: break;
        case 36: 
          { return newSym(MJunosSym.SOURCEADDRESS);
          }
        case 83: break;
        case 41: 
          { return newSym(MJunosSym.SOURCEPREFIXLIST);
          }
        case 84: break;
        case 44: 
          { return newSym(MJunosSym.DESTINATIONPREFIXLIST);
          }
        case 85: break;
        case 42: 
          { return newSym(MJunosSym.PREFIXLISTFILTER);
          }
        case 86: break;
        case 26: 
          { return newSym(MJunosSym.FIREWALL);
          }
        case 87: break;
        case 24: 
          { return newSym(MJunosSym.NEXTHOP);
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(MJunosSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
