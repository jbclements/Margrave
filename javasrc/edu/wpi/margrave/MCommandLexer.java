/* The following code was generated by JFlex 1.4.3 on 7/1/10 1:44 PM */


/*
  	Copyright 2009-2010 Brown University and Worcester Polytechnic Institute.
    
    This file is part of Margrave.

    Margrave is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Margrave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Margrave.  If not, see <http://www.gnu.org/licenses/>.
 */


package edu.wpi.margrave;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import java_cup.runtime.Symbol;
import kodkod.ast.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/1/10 1:44 PM from the specification file
 * <tt>C:/Documents and Settings/tn/workspace/Margrave/src/edu/wpi/margrave/margrave.jflex</tt>
 */
class MCommandLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\0\1\3\5\0"+
    "\1\31\1\32\2\0\1\2\3\0\12\4\1\27\2\0\1\30\1\0"+
    "\1\14\1\0\1\17\1\11\1\35\1\23\1\13\1\26\1\15\1\33"+
    "\1\10\1\36\1\0\1\12\1\25\1\21\1\6\1\5\1\41\1\20"+
    "\1\7\1\22\1\16\1\40\1\34\1\24\1\37\1\42\6\0\1\17"+
    "\1\11\1\35\1\23\1\13\1\26\1\15\1\33\1\10\1\36\1\0"+
    "\1\12\1\25\1\21\1\6\1\5\1\41\1\20\1\7\1\22\1\16"+
    "\1\40\1\34\1\24\1\37\1\42\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\17\1\1\6"+
    "\1\7\1\10\1\11\4\1\1\0\5\1\1\12\10\1"+
    "\1\13\1\14\14\1\1\15\6\1\1\16\21\1\1\17"+
    "\10\1\1\20\4\1\1\21\2\1\1\22\3\1\1\23"+
    "\3\1\1\24\4\1\1\25\1\26\1\1\1\27\5\1"+
    "\1\30\11\1\1\31\27\1\1\32\1\1\1\33\1\1"+
    "\1\34\1\35\2\1\1\36\1\37\10\1\1\40\2\1"+
    "\1\41\3\1\1\42\43\1\1\43\4\1\1\44\2\1"+
    "\1\45\3\1\1\46\1\1\1\47\3\1\1\50\3\1"+
    "\1\51\1\1\1\52\5\1\1\53\11\1\1\54\7\1"+
    "\1\55\4\1\1\56\3\1\1\57\4\1\1\60\1\1"+
    "\1\61\3\1\1\62\1\63\1\1\1\64\4\1\1\65"+
    "\1\1\1\66\1\67\4\1\1\70\2\1\1\71\5\1"+
    "\1\72\1\73\4\1\1\74\1\1\1\75\1\76\4\1"+
    "\1\77\2\1\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\3\1\1\106\1\107\1\110\1\111\1\112\2\1\1\113"+
    "\3\1\1\114\2\1\1\115\1\116\1\117\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\106\0\151\0\214\0\257\0\322"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\106\0\106\0\106"+
    "\0\106\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e"+
    "\0\u03b1\0\u03d4\0\u03f7\0\43\0\u041a\0\u043d\0\u0460\0\u0483"+
    "\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\43\0\u0532\0\u0555\0\u0578"+
    "\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690"+
    "\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8"+
    "\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0"+
    "\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8"+
    "\0\u09fb\0\u0a1e\0\u0a41\0\106\0\u0a64\0\u0a87\0\u0aaa\0\u0acd"+
    "\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\43\0\u0b7c\0\u0b9f\0\u0bc2"+
    "\0\u0be5\0\43\0\u0c08\0\u0c2b\0\43\0\u0c4e\0\u0c71\0\u0c94"+
    "\0\43\0\u0cb7\0\u0cda\0\u0cfd\0\43\0\u0d20\0\u0d43\0\u0d66"+
    "\0\u0d89\0\43\0\43\0\u0dac\0\43\0\u0dcf\0\u0df2\0\u0e15"+
    "\0\u0e38\0\u0e5b\0\43\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a"+
    "\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\43\0\u0fb9\0\u0fdc\0\u0fff"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117"+
    "\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f"+
    "\0\u1252\0\u1275\0\u1298\0\u12bb\0\43\0\u12de\0\43\0\u1301"+
    "\0\43\0\43\0\u1324\0\u1347\0\43\0\43\0\u136a\0\u138d"+
    "\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5"+
    "\0\u14c8\0\43\0\u14eb\0\u150e\0\u1531\0\43\0\u1554\0\u1577"+
    "\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f"+
    "\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7"+
    "\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf"+
    "\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7"+
    "\0\u19fa\0\43\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\43\0\u1aa9"+
    "\0\u1acc\0\43\0\u1aef\0\u1b12\0\u1b35\0\43\0\u1b58\0\43"+
    "\0\u1b7b\0\u1b9e\0\u1bc1\0\43\0\u1be4\0\u1c07\0\u1c2a\0\43"+
    "\0\u1c4d\0\43\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\43"+
    "\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14"+
    "\0\u1e37\0\43\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09"+
    "\0\u1f2c\0\43\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8\0\43\0\u1fdb"+
    "\0\u1ffe\0\u2021\0\43\0\u2044\0\u2067\0\u208a\0\u20ad\0\43"+
    "\0\u20d0\0\43\0\u20f3\0\u2116\0\u2139\0\43\0\43\0\u215c"+
    "\0\43\0\u217f\0\u21a2\0\u21c5\0\u21e8\0\43\0\u220b\0\43"+
    "\0\43\0\u222e\0\u2251\0\u2274\0\u2297\0\u22ba\0\u22dd\0\u2300"+
    "\0\43\0\u2323\0\u2346\0\u2369\0\u238c\0\u23af\0\43\0\43"+
    "\0\u23d2\0\u23f5\0\u2418\0\u243b\0\43\0\u245e\0\43\0\43"+
    "\0\u2481\0\u24a4\0\u24c7\0\u24ea\0\43\0\u250d\0\u2530\0\43"+
    "\0\43\0\43\0\43\0\43\0\43\0\u2553\0\u2576\0\u2599"+
    "\0\43\0\43\0\43\0\43\0\43\0\u25bc\0\u25df\0\43"+
    "\0\u2602\0\u2625\0\u2648\0\43\0\u266b\0\u268e\0\43\0\43"+
    "\0\43\0\43\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\2\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\2\1\33\2\2\1\34"+
    "\1\35\2\2\3\0\23\2\4\0\10\2\43\0\1\36"+
    "\1\0\1\36\1\0\37\36\1\2\3\0\1\6\22\2"+
    "\4\0\11\2\3\0\2\2\1\37\7\2\1\40\1\41"+
    "\1\42\6\2\4\0\2\2\1\43\6\2\3\0\14\2"+
    "\1\44\1\45\1\46\4\2\4\0\11\2\3\0\2\2"+
    "\1\47\1\2\1\50\2\2\1\51\2\2\1\52\10\2"+
    "\4\0\1\53\5\2\1\54\2\2\3\0\3\2\1\55"+
    "\11\2\1\56\1\2\1\57\1\2\1\60\1\61\4\0"+
    "\11\2\3\0\2\2\1\62\4\2\1\63\13\2\4\0"+
    "\11\2\3\0\20\2\1\64\2\2\4\0\11\2\3\0"+
    "\7\2\1\65\2\2\1\66\10\2\4\0\11\2\3\0"+
    "\15\2\1\67\5\2\4\0\11\2\3\0\5\2\1\70"+
    "\1\71\6\2\1\72\1\73\1\74\3\2\4\0\11\2"+
    "\3\0\7\2\1\75\2\2\1\76\10\2\4\0\2\2"+
    "\1\77\6\2\3\0\2\2\1\100\4\2\1\101\13\2"+
    "\4\0\11\2\3\0\2\2\1\102\7\2\1\103\1\104"+
    "\7\2\4\0\1\105\10\2\3\0\4\2\1\106\2\2"+
    "\1\107\13\2\4\0\11\2\3\0\13\2\1\110\7\2"+
    "\4\0\11\2\3\0\2\2\1\111\7\2\1\112\10\2"+
    "\4\0\11\2\3\0\4\2\1\113\16\2\4\0\11\2"+
    "\3\0\2\2\1\114\4\2\1\115\3\2\1\116\1\117"+
    "\6\2\4\0\1\120\10\2\3\0\2\2\1\121\4\2"+
    "\1\122\13\2\4\0\11\2\3\0\12\2\1\123\10\2"+
    "\4\0\10\2\1\36\1\0\1\36\1\124\37\36\1\2"+
    "\3\0\1\2\1\125\1\2\1\126\2\2\1\127\14\2"+
    "\4\0\11\2\3\0\5\2\1\130\15\2\4\0\11\2"+
    "\3\0\14\2\1\131\6\2\4\0\11\2\3\0\4\2"+
    "\1\132\2\2\1\133\13\2\4\0\11\2\3\0\2\2"+
    "\1\134\20\2\4\0\11\2\3\0\7\2\1\135\13\2"+
    "\4\0\11\2\3\0\23\2\4\0\1\136\10\2\3\0"+
    "\14\2\1\137\6\2\4\0\11\2\3\0\15\2\1\140"+
    "\5\2\4\0\7\2\1\141\1\2\3\0\16\2\1\142"+
    "\4\2\4\0\11\2\3\0\5\2\1\143\15\2\4\0"+
    "\11\2\3\0\2\2\1\144\20\2\4\0\11\2\3\0"+
    "\3\2\1\145\17\2\4\0\11\2\3\0\22\2\1\146"+
    "\4\0\11\2\3\0\5\2\1\147\15\2\4\0\11\2"+
    "\3\0\1\2\1\150\21\2\4\0\11\2\3\0\22\2"+
    "\1\151\4\0\11\2\3\0\13\2\1\152\7\2\4\0"+
    "\11\2\3\0\13\2\1\153\7\2\4\0\11\2\3\0"+
    "\1\2\1\154\21\2\4\0\11\2\3\0\16\2\1\155"+
    "\4\2\4\0\11\2\3\0\13\2\1\156\7\2\4\0"+
    "\11\2\3\0\1\2\1\157\15\2\1\160\3\2\4\0"+
    "\11\2\3\0\3\2\1\161\17\2\4\0\11\2\3\0"+
    "\6\2\1\162\14\2\4\0\11\2\3\0\17\2\1\163"+
    "\3\2\4\0\11\2\3\0\21\2\1\164\1\2\4\0"+
    "\11\2\3\0\17\2\1\165\3\2\4\0\11\2\3\0"+
    "\15\2\1\166\5\2\4\0\6\2\1\167\2\2\3\0"+
    "\6\2\1\170\14\2\4\0\11\2\3\0\2\2\1\171"+
    "\20\2\4\0\11\2\3\0\15\2\1\172\1\173\4\2"+
    "\4\0\11\2\3\0\20\2\1\174\2\2\4\0\11\2"+
    "\3\0\16\2\1\175\4\2\4\0\11\2\3\0\1\2"+
    "\1\176\21\2\4\0\11\2\3\0\14\2\1\177\6\2"+
    "\4\0\11\2\3\0\13\2\1\200\7\2\4\0\11\2"+
    "\3\0\3\2\1\201\17\2\4\0\11\2\3\0\5\2"+
    "\1\202\15\2\4\0\2\2\1\203\6\2\3\0\23\2"+
    "\4\0\2\2\1\204\6\2\3\0\14\2\1\205\6\2"+
    "\4\0\11\2\3\0\15\2\1\206\5\2\4\0\11\2"+
    "\3\0\11\2\1\207\11\2\4\0\11\2\3\0\6\2"+
    "\1\210\3\2\1\211\2\2\1\212\3\2\1\213\1\2"+
    "\4\0\11\2\3\0\4\2\1\214\16\2\4\0\11\2"+
    "\3\0\3\2\1\215\17\2\4\0\11\2\3\0\7\2"+
    "\1\216\13\2\4\0\11\2\3\0\4\2\1\217\16\2"+
    "\4\0\11\2\3\0\23\2\4\0\2\2\1\220\6\2"+
    "\3\0\23\2\4\0\2\2\1\221\6\2\3\0\13\2"+
    "\1\222\7\2\4\0\11\2\3\0\12\2\1\223\10\2"+
    "\4\0\11\2\3\0\3\2\1\224\17\2\4\0\11\2"+
    "\3\0\4\2\1\225\16\2\4\0\11\2\3\0\6\2"+
    "\1\226\14\2\4\0\11\2\3\0\16\2\1\227\4\2"+
    "\4\0\11\2\3\0\2\2\1\230\20\2\4\0\11\2"+
    "\3\0\1\2\1\231\15\2\1\232\3\2\4\0\11\2"+
    "\3\0\21\2\1\233\1\2\4\0\11\2\3\0\7\2"+
    "\1\234\13\2\4\0\11\2\3\0\16\2\1\235\4\2"+
    "\4\0\11\2\3\0\11\2\1\236\11\2\4\0\11\2"+
    "\3\0\7\2\1\237\13\2\4\0\11\2\3\0\3\2"+
    "\1\240\17\2\4\0\11\2\3\0\23\2\4\0\1\2"+
    "\1\241\7\2\3\0\2\2\1\242\20\2\4\0\11\2"+
    "\3\0\2\2\1\243\20\2\4\0\11\2\3\0\6\2"+
    "\1\244\14\2\4\0\11\2\3\0\17\2\1\245\3\2"+
    "\4\0\11\2\3\0\22\2\1\246\4\0\11\2\3\0"+
    "\6\2\1\247\14\2\4\0\11\2\3\0\14\2\1\250"+
    "\6\2\4\0\11\2\3\0\2\2\1\251\20\2\4\0"+
    "\11\2\3\0\7\2\1\252\13\2\4\0\11\2\3\0"+
    "\16\2\1\253\4\2\4\0\11\2\3\0\2\2\1\254"+
    "\20\2\4\0\11\2\3\0\13\2\1\255\7\2\4\0"+
    "\11\2\3\0\12\2\1\256\10\2\4\0\11\2\3\0"+
    "\7\2\1\257\13\2\4\0\11\2\3\0\21\2\1\260"+
    "\1\2\4\0\11\2\3\0\7\2\1\261\13\2\4\0"+
    "\11\2\3\0\16\2\1\262\4\2\4\0\11\2\3\0"+
    "\13\2\1\263\7\2\4\0\11\2\3\0\6\2\1\264"+
    "\14\2\4\0\11\2\3\0\11\2\1\265\11\2\4\0"+
    "\11\2\3\0\15\2\1\266\5\2\4\0\11\2\3\0"+
    "\23\2\4\0\3\2\1\267\5\2\3\0\12\2\1\270"+
    "\10\2\4\0\11\2\3\0\4\2\1\271\16\2\4\0"+
    "\11\2\3\0\21\2\1\272\1\2\4\0\11\2\3\0"+
    "\23\2\4\0\2\2\1\273\6\2\3\0\23\2\4\0"+
    "\1\274\10\2\3\0\6\2\1\275\14\2\4\0\11\2"+
    "\3\0\15\2\1\276\5\2\4\0\11\2\3\0\3\2"+
    "\1\277\17\2\4\0\11\2\3\0\1\2\1\300\21\2"+
    "\4\0\11\2\3\0\6\2\1\301\14\2\4\0\11\2"+
    "\3\0\7\2\1\302\13\2\4\0\11\2\3\0\13\2"+
    "\1\303\7\2\4\0\11\2\3\0\6\2\1\304\14\2"+
    "\4\0\11\2\3\0\13\2\1\305\7\2\4\0\11\2"+
    "\3\0\16\2\1\306\4\2\4\0\11\2\3\0\6\2"+
    "\1\307\14\2\4\0\11\2\3\0\6\2\1\310\14\2"+
    "\4\0\11\2\3\0\4\2\1\311\16\2\4\0\11\2"+
    "\3\0\23\2\4\0\2\2\1\312\6\2\3\0\4\2"+
    "\1\313\16\2\4\0\11\2\3\0\4\2\1\314\16\2"+
    "\4\0\11\2\3\0\14\2\1\315\6\2\4\0\11\2"+
    "\3\0\13\2\1\316\7\2\4\0\11\2\3\0\4\2"+
    "\1\317\16\2\4\0\11\2\3\0\5\2\1\320\15\2"+
    "\4\0\11\2\3\0\14\2\1\321\6\2\4\0\11\2"+
    "\3\0\6\2\1\322\14\2\4\0\11\2\3\0\2\2"+
    "\1\323\4\2\1\324\13\2\4\0\11\2\3\0\12\2"+
    "\1\325\10\2\4\0\11\2\3\0\4\2\1\326\16\2"+
    "\4\0\11\2\3\0\2\2\1\327\20\2\4\0\11\2"+
    "\3\0\13\2\1\330\7\2\4\0\11\2\3\0\1\2"+
    "\1\331\21\2\4\0\11\2\3\0\14\2\1\332\6\2"+
    "\4\0\11\2\3\0\14\2\1\333\6\2\4\0\11\2"+
    "\3\0\3\2\1\334\17\2\4\0\11\2\3\0\21\2"+
    "\1\335\1\2\4\0\11\2\3\0\7\2\1\336\13\2"+
    "\4\0\11\2\3\0\3\2\1\337\17\2\4\0\11\2"+
    "\3\0\5\2\1\340\15\2\4\0\11\2\3\0\21\2"+
    "\1\341\1\2\4\0\11\2\3\0\6\2\1\342\14\2"+
    "\4\0\11\2\3\0\4\2\1\343\16\2\4\0\11\2"+
    "\3\0\7\2\1\344\13\2\4\0\11\2\3\0\2\2"+
    "\1\345\20\2\4\0\11\2\3\0\11\2\1\346\11\2"+
    "\4\0\11\2\3\0\3\2\1\347\17\2\4\0\11\2"+
    "\3\0\6\2\1\350\14\2\4\0\11\2\3\0\16\2"+
    "\1\351\4\2\4\0\11\2\3\0\7\2\1\352\13\2"+
    "\4\0\11\2\3\0\13\2\1\353\7\2\4\0\11\2"+
    "\3\0\16\2\1\354\4\2\4\0\11\2\3\0\16\2"+
    "\1\355\4\2\4\0\11\2\3\0\13\2\1\356\7\2"+
    "\4\0\11\2\3\0\4\2\1\357\16\2\4\0\11\2"+
    "\3\0\3\2\1\360\17\2\4\0\11\2\3\0\16\2"+
    "\1\361\4\2\4\0\11\2\3\0\17\2\1\362\3\2"+
    "\4\0\11\2\3\0\5\2\1\363\15\2\4\0\11\2"+
    "\3\0\2\2\1\364\20\2\4\0\11\2\3\0\4\2"+
    "\1\365\16\2\4\0\11\2\3\0\13\2\1\366\7\2"+
    "\4\0\11\2\3\0\5\2\1\367\15\2\4\0\11\2"+
    "\3\0\23\2\4\0\4\2\1\370\4\2\3\0\3\2"+
    "\1\371\17\2\4\0\11\2\3\0\13\2\1\372\7\2"+
    "\4\0\11\2\3\0\4\2\1\373\16\2\4\0\11\2"+
    "\3\0\14\2\1\374\6\2\4\0\11\2\3\0\23\2"+
    "\4\0\2\2\1\375\6\2\3\0\4\2\1\376\16\2"+
    "\4\0\11\2\3\0\23\2\4\0\5\2\1\377\3\2"+
    "\3\0\7\2\1\u0100\13\2\4\0\11\2\3\0\14\2"+
    "\1\u0101\6\2\4\0\11\2\3\0\16\2\1\u0102\4\2"+
    "\4\0\11\2\3\0\16\2\1\u0103\4\2\4\0\11\2"+
    "\3\0\7\2\1\u0104\13\2\4\0\11\2\3\0\14\2"+
    "\1\u0105\6\2\4\0\11\2\3\0\15\2\1\u0106\5\2"+
    "\4\0\11\2\3\0\12\2\1\u0107\10\2\4\0\11\2"+
    "\3\0\13\2\1\u0108\7\2\4\0\11\2\3\0\16\2"+
    "\1\u0109\4\2\4\0\11\2\3\0\7\2\1\u010a\13\2"+
    "\4\0\11\2\3\0\3\2\1\u010b\17\2\4\0\11\2"+
    "\3\0\4\2\1\u010c\16\2\4\0\11\2\3\0\1\2"+
    "\1\u010d\21\2\4\0\11\2\3\0\15\2\1\u010e\5\2"+
    "\4\0\11\2\3\0\16\2\1\u010f\4\2\4\0\11\2"+
    "\3\0\4\2\1\u0110\16\2\4\0\11\2\3\0\4\2"+
    "\1\u0111\16\2\4\0\11\2\3\0\4\2\1\u0112\16\2"+
    "\4\0\11\2\3\0\14\2\1\u0113\6\2\4\0\11\2"+
    "\3\0\1\2\1\u0114\21\2\4\0\11\2\3\0\14\2"+
    "\1\u0115\6\2\4\0\11\2\3\0\14\2\1\u0116\6\2"+
    "\4\0\11\2\3\0\15\2\1\u0117\5\2\4\0\11\2"+
    "\3\0\7\2\1\u0118\13\2\4\0\11\2\3\0\12\2"+
    "\1\u0119\10\2\4\0\11\2\3\0\14\2\1\u011a\6\2"+
    "\4\0\11\2\3\0\22\2\1\u011b\4\0\11\2\3\0"+
    "\16\2\1\u011c\4\2\4\0\11\2\3\0\6\2\1\u011d"+
    "\14\2\4\0\11\2\3\0\23\2\4\0\1\u011e\10\2"+
    "\3\0\6\2\1\u011f\14\2\4\0\11\2\3\0\16\2"+
    "\1\u0120\4\2\4\0\11\2\3\0\7\2\1\u0121\13\2"+
    "\4\0\11\2\3\0\13\2\1\u0122\7\2\4\0\11\2"+
    "\3\0\15\2\1\u0123\5\2\4\0\11\2\3\0\13\2"+
    "\1\u0124\7\2\4\0\11\2\3\0\16\2\1\u0125\4\2"+
    "\4\0\11\2\3\0\16\2\1\u0126\4\2\4\0\11\2"+
    "\3\0\1\2\1\u0127\21\2\4\0\11\2\3\0\3\2"+
    "\1\u0128\17\2\4\0\11\2\3\0\7\2\1\u0129\13\2"+
    "\4\0\11\2\3\0\16\2\1\u012a\4\2\4\0\11\2"+
    "\3\0\6\2\1\u012b\14\2\4\0\11\2\3\0\23\2"+
    "\4\0\2\2\1\u012c\6\2\3\0\2\2\1\u012d\20\2"+
    "\4\0\11\2\3\0\16\2\1\u012e\4\2\4\0\11\2"+
    "\3\0\15\2\1\u012f\5\2\4\0\11\2\3\0\16\2"+
    "\1\u0130\4\2\4\0\11\2\3\0\11\2\1\u0131\11\2"+
    "\4\0\11\2\3\0\15\2\1\u0132\5\2\4\0\11\2"+
    "\3\0\2\2\1\u0133\20\2\4\0\11\2\3\0\2\2"+
    "\1\u0134\20\2\4\0\11\2\3\0\3\2\1\u0135\17\2"+
    "\4\0\11\2\3\0\13\2\1\u0136\7\2\4\0\11\2"+
    "\3\0\7\2\1\u0137\13\2\4\0\11\2\3\0\11\2"+
    "\1\u0138\11\2\4\0\11\2\3\0\6\2\1\u0139\14\2"+
    "\4\0\11\2\3\0\4\2\1\u013a\16\2\4\0\11\2"+
    "\3\0\7\2\1\u013b\13\2\4\0\11\2\3\0\7\2"+
    "\1\u013c\13\2\4\0\11\2\3\0\23\2\4\0\4\2"+
    "\1\u013d\4\2\3\0\16\2\1\u013e\4\2\4\0\11\2"+
    "\3\0\7\2\1\u013f\13\2\4\0\11\2\3\0\14\2"+
    "\1\u0140\6\2\4\0\11\2\3\0\2\2\1\u0141\20\2"+
    "\4\0\11\2\3\0\12\2\1\u0142\10\2\4\0\11\2"+
    "\3\0\7\2\1\u0143\13\2\4\0\11\2\3\0\13\2"+
    "\1\u0144\7\2\4\0\11\2\3\0\16\2\1\u0145\4\2"+
    "\4\0\11\2\3\0\15\2\1\u0146\5\2\4\0\11\2"+
    "\3\0\23\2\4\0\5\2\1\u0147\3\2\3\0\7\2"+
    "\1\u0148\13\2\4\0\11\2\3\0\23\2\4\0\4\2"+
    "\1\u0149\4\2\3\0\16\2\1\u014a\4\2\4\0\11\2"+
    "\3\0\15\2\1\u014b\5\2\4\0\11\2\3\0\15\2"+
    "\1\u014c\5\2\4\0\11\2\3\0\7\2\1\u014d\13\2"+
    "\4\0\11\2\3\0\4\2\1\u014e\16\2\4\0\11\2"+
    "\3\0\13\2\1\u014f\7\2\4\0\11\2\3\0\7\2"+
    "\1\u0150\13\2\4\0\11\2\3\0\17\2\1\u0151\3\2"+
    "\4\0\11\2\3\0\10\2\1\u0152\12\2\4\0\11\2"+
    "\3\0\7\2\1\u0153\13\2\4\0\11\2\3\0\15\2"+
    "\1\u0154\5\2\4\0\11\2\3\0\16\2\1\u0155\4\2"+
    "\4\0\11\2\3\0\7\2\1\u0156\13\2\4\0\11\2"+
    "\3\0\16\2\1\u0157\4\2\4\0\11\2\3\0\7\2"+
    "\1\u0158\13\2\4\0\11\2\3\0\13\2\1\u0159\7\2"+
    "\4\0\11\2\3\0\15\2\1\u015a\5\2\4\0\11\2"+
    "\3\0\14\2\1\u015b\6\2\4\0\11\2\3\0\17\2"+
    "\1\u015c\3\2\4\0\11\2\3\0\17\2\1\u015d\3\2"+
    "\4\0\11\2\3\0\7\2\1\u015e\13\2\4\0\11\2"+
    "\3\0\14\2\1\u015f\6\2\4\0\11\2\3\0\16\2"+
    "\1\u0160\4\2\4\0\11\2\3\0\23\2\4\0\4\2"+
    "\1\u0161\4\2\3\0\10\2\1\u0162\12\2\4\0\11\2"+
    "\3\0\17\2\1\u0163\3\2\4\0\10\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9905];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\21\1\4\11\4\1\1\0\65\1"+
    "\1\11\u010f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[355];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

Symbol newSym(int tokenId) 
{
    return new Symbol(tokenId, yyline, yycolumn);
}

Symbol newSym(int tokenId, Object value) 
{
    return new Symbol(tokenId, yyline, yycolumn, value);
}


Set<MIDBCollection> seenPolicies = new HashSet<MIDBCollection>();  



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MCommandLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MCommandLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return newSym(MCommandSym.FOR);
          }
        case 82: break;
        case 12: 
          { return newSym(MCommandSym.IN);
          }
        case 83: break;
        case 46: 
          { return newSym(MCommandSym.TARGET);
          }
        case 84: break;
        case 58: 
          { return newSym(MCommandSym.COMPARE);
          }
        case 85: break;
        case 6: 
          { return newSym(MCommandSym.COLON);
          }
        case 86: break;
        case 31: 
          { return newSym(MCommandSym.LEAF);
          }
        case 87: break;
        case 48: 
          { return newSym(MCommandSym.CREATE);
          }
        case 88: break;
        case 7: 
          { return newSym(MCommandSym.EQUALS);
          }
        case 89: break;
        case 10: 
          { return newSym(MCommandSym.OR);
          }
        case 90: break;
        case 27: 
          { return newSym(MCommandSym.SIZE);
          }
        case 91: break;
        case 21: 
          { return newSym(MCommandSym.ALL);
          }
        case 92: break;
        case 77: 
          { return newSym(MCommandSym.REQUESTVAR);
          }
        case 93: break;
        case 41: 
          { return newSym(MCommandSym.CASES);
          }
        case 94: break;
        case 23: 
          { return newSym(MCommandSym.ADD);
          }
        case 95: break;
        case 40: 
          { return newSym(MCommandSym.COUNT);
          }
        case 96: break;
        case 2: 
          { /* Ignore whitespace */
          }
        case 97: break;
        case 51: 
          { return newSym(MCommandSym.PARTIAL);
          }
        case 98: break;
        case 8: 
          { return newSym(MCommandSym.LPAREN);
          }
        case 99: break;
        case 5: 
          { return newSym(MCommandSym.NATURAL, Integer.parseInt(yytext()));
          }
        case 100: break;
        case 37: 
          { return newSym(MCommandSym.TOTAL);
          }
        case 101: break;
        case 70: 
          { return newSym(MCommandSym.POPULATED);
          }
        case 102: break;
        case 3: 
          { return newSym(MCommandSym.COMMA);
          }
        case 103: break;
        case 43: 
          { return newSym(MCommandSym.POLICY);
          }
        case 104: break;
        case 47: 
          { return newSym(MCommandSym.HIGHER);
          }
        case 105: break;
        case 30: 
          { return newSym(MCommandSym.LOAD);
          }
        case 106: break;
        case 74: 
          { return newSym(MCommandSym.IDBOUTPUT);
          }
        case 107: break;
        case 17: 
          { return newSym(MCommandSym.SET);
          }
        case 108: break;
        case 56: 
          { return newSym(MCommandSym.REQUEST);
          }
        case 109: break;
        case 26: 
          { return newSym(MCommandSym.SORT);
          }
        case 110: break;
        case 44: 
          { return newSym(MCommandSym.SUBSET);
          }
        case 111: break;
        case 14: 
          { return newSym(MCommandSym.TO);
          }
        case 112: break;
        case 32: 
          { return newSym(MCommandSym.RULE);
          }
        case 113: break;
        case 60: 
          { return newSym(MCommandSym.PRIORITY);
          }
        case 114: break;
        case 73: 
          { return newSym(MCommandSym.SINGLETON);
          }
        case 115: break;
        case 55: 
          { return newSym(MCommandSym.EXPLORE);
          }
        case 116: break;
        case 62: 
          { return newSym(MCommandSym.OTHERVAR);
          }
        case 117: break;
        case 22: 
          { return newSym(MCommandSym.AND);
          }
        case 118: break;
        case 54: 
          { return newSym(MCommandSym.IMPLIES);
          }
        case 119: break;
        case 28: 
          { return newSym(MCommandSym.SHOW);
          }
        case 120: break;
        case 79: 
          { return newSym(MCommandSym.VOCABULARY);
          }
        case 121: break;
        case 24: 
          { return newSym(MCommandSym.NOT);
          }
        case 122: break;
        case 61: 
          { return newSym(MCommandSym.PCOMBINE);
          }
        case 123: break;
        case 72: 
          { return newSym(MCommandSym.PREDICATE);
          }
        case 124: break;
        case 38: 
          { return newSym(MCommandSym.DEBUG);
          }
        case 125: break;
        case 68: 
          { return newSym(MCommandSym.FUNCTION);
          }
        case 126: break;
        case 34: 
          { return newSym(MCommandSym.THAN);
          }
        case 127: break;
        case 80: 
          { return newSym(MCommandSym.GUARANTEEDQMARK);
          }
        case 128: break;
        case 64: 
          { return newSym(MCommandSym.RCOMBINE);
          }
        case 129: break;
        case 20: 
          { return newSym(MCommandSym.GET);
          }
        case 130: break;
        case 33: 
          { return newSym(MCommandSym.NEXT);
          }
        case 131: break;
        case 71: 
          { return newSym(MCommandSym.POSSIBLEQMARK);
          }
        case 132: break;
        case 75: 
          { return newSym(MCommandSym.ATMOSTONE);
          }
        case 133: break;
        case 45: 
          { return newSym(MCommandSym.RENAME);
          }
        case 134: break;
        case 67: 
          { return newSym(MCommandSym.DECISION);
          }
        case 135: break;
        case 18: 
          { return newSym(MCommandSym.SQS);
          }
        case 136: break;
        case 19: 
          { return newSym(MCommandSym.IFF);
          }
        case 137: break;
        case 50: 
          { return newSym(MCommandSym.PUBLISH);
          }
        case 138: break;
        case 13: 
          { return newSym(MCommandSym.AT);
          }
        case 139: break;
        case 53: 
          { return newSym(MCommandSym.SUBSORT);
          }
        case 140: break;
        case 4: 
          { throw new MLexerException("Could not start a new lexical token.", yycolumn, yyline, yychar, yytext());
          }
        case 141: break;
        case 69: 
          { return newSym(MCommandSym.COLLAPSE);
          }
        case 142: break;
        case 59: 
          { return newSym(MCommandSym.CEILING);
          }
        case 143: break;
        case 16: 
          { return newSym(MCommandSym.ONE);
          }
        case 144: break;
        case 35: 
          { return newSym(MCommandSym.UNDER);
          }
        case 145: break;
        case 29: 
          { return newSym(MCommandSym.INFO);
          }
        case 146: break;
        case 42: 
          { return newSym(MCommandSym.CHILD);
          }
        case 147: break;
        case 15: 
          { return newSym(MCommandSym.IDENTIFIER, yytext().substring(1, yytext().length()-1).toLowerCase());
          }
        case 148: break;
        case 39: 
          { return newSym(MCommandSym.XACML);
          }
        case 149: break;
        case 81: 
          { return newSym(MCommandSym.UNPOPULATED);
          }
        case 150: break;
        case 36: 
          { return newSym(MCommandSym.RULES);
          }
        case 151: break;
        case 49: 
          { return newSym(MCommandSym.VECTOR);
          }
        case 152: break;
        case 52: 
          { return newSym(MCommandSym.PREPARE);
          }
        case 153: break;
        case 11: 
          { return newSym(MCommandSym.IS);
          }
        case 154: break;
        case 63: 
          { return newSym(MCommandSym.ABSTRACT);
          }
        case 155: break;
        case 76: 
          { return newSym(MCommandSym.QUALIFIED);
          }
        case 156: break;
        case 78: 
          { return newSym(MCommandSym.CONSTRAINT);
          }
        case 157: break;
        case 66: 
          { return newSym(MCommandSym.DISJOINT);
          }
        case 158: break;
        case 65: 
          { return newSym(MCommandSym.NONEMPTY);
          }
        case 159: break;
        case 9: 
          { return newSym(MCommandSym.RPAREN);
          }
        case 160: break;
        case 57: 
          { return newSym(MCommandSym.TUPLING);
          }
        case 161: break;
        case 1: 
          { return newSym(MCommandSym.IDENTIFIER, yytext().toLowerCase());
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(MCommandSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
