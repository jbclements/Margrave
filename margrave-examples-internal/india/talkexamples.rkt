#lang racket

;(require margrave)
(require (file "F:\\msysgit\\git\\margrave\\margrave\\margrave.rkt"))

; Start the engine
(start-margrave-engine #:margrave-params '( "-log" )
                       #:margrave-path "F:\\msysgit\\git\\margrave\\margrave")

; Our policies:
(m-load-policy "aclfw1" "inboundacl_fw1.p")
(m-load-policy "aclfw2" "inboundacl_fw2.p")
(m-load-policy "natfw1" "inboundnat_fw1.p")
(m-load-policy "natfw2" "inboundnat_fw2.p")
(m-load-policy "aclfw1new" "inboundacl_fw1_new.p")
(m-load-policy "aclfw2new" "inboundacl_fw2_new.p")
(m-load-policy "aclfw1ex6" "ex6/inboundacl_fw1_ex6.p")
(m-load-policy "aclfw2ex6" "ex6/inboundacl_fw2_ex6.p")
(m-load-policy "natfw2ex6" "ex6/inboundnat_fw2_ex6.p")

; ************************************************************
; Example 1: "Is it possible for the firewall(s) to drop packets
; from the employee's PC to an external server on port 80?
; ************************************************************

; Query generated by the topology of the network: A request coming from the employee PC
; can be dropped if:
; (1) Internal FW rejects it, or
; (2) External FW rejects it (after it is modified by internal FW's NAT)


; !!! TODO: deal with: "Warning: ComparisonFormula with EQUALS operator with non-Variable children visited: (fw2static = newip) "

(m-let "Example1" '([interf Interface] 
                    [ipsrc IPAddress]
                    [ipdest IPAddress]
                    [portsrc Port]
                    [portdest Port]
                    [pro Protocol]
                    [tempnatsrc IPAddress]
                    [interminterface Interface])
       '(and 
         (= 'fw2int interf)
         (= 'fw1dmz interminterface)         
         (OtherPorts portsrc)
         (= 'managerpc ipsrc)
         (= 'port80 portdest)
         (= 'tcp pro)
         (OutsideIPs ipdest)
         
         (not (= ipdest ipsrc))
         (not (= portsrc portdest))
         
         ; Bind the result of NAT at FW2 to tempnatsrc
         ([natfw2 translate] interf ipsrc ipdest portsrc portdest pro tempnatsrc)
         
         ; Two places the packet could be denied. One pre-NAT, one post-NAT.
         (or
          ([aclfw2 deny] interf ipsrc ipdest portsrc portdest pro)                               
          ([aclfw1 deny] interminterface tempnatsrc ipdest portsrc portdest pro)))
       )


(printf "~n----------------------------------~nExample 1 results:~n----------------------------------~n~n")
(display (m-show "Example1"))





; ************************************************************
; Example 2: "How is it the case that this packet could be dropped?"
; ************************************************************

(printf "~n----------------------------------~nExample 2 results:~n----------------------------------~n~n")
(display (m-show "Example1" #:include '(([aclfw2 deny] interf ipsrc ipdest portsrc portdest pro) 
                                        ([aclfw1 deny] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule1_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule2_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule3_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule4_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule5_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule6_applies] interf tempnatsrc ipdest portsrc portdest pro)
                                        ([aclfw1 rule7_applies] interf tempnatsrc ipdest portsrc portdest pro))))





; *************************************************
; Example 3: Testing original property after first change
; *************************************************

(m-let "Example3" '([interf Interface] 
                    [ipsrc IPAddress]
                    [ipdest IPAddress]
                    [portsrc Port]
                    [portdest Port]
                    [pro Protocol]
                    [tempnatsrc IPAddress]
                    [interminterface Interface])
       '(and 
         (= 'fw2int interf)
         (= 'fw1dmz interminterface)         
         (OtherPorts portsrc)
         (= 'managerpc ipsrc)
         (= 'port80 portdest)
         (= 'tcp pro)
         (OutsideIPs ipdest)
         
         (not (= ipdest ipsrc))
         (not (= portsrc portdest))
         
         ; Bind the result of NAT at FW2 to tempnatsrc
         ([natfw2 translate] interf ipsrc ipdest portsrc portdest pro tempnatsrc)
         
         ; Two places the packet could be denied. One pre-NAT, one post-NAT.
         (or
          ([aclfw2 deny] interf ipsrc ipdest portsrc portdest pro)                               
          ([aclfw1new deny] interminterface tempnatsrc ipdest portsrc portdest pro))))


(printf "~n----------------------------------~nExample 3 results:~n----------------------------------~n~n")
(display (m-show "Example3"))

(m-reset "Example3")
(m-get "Example3"
       #:include '(([aclfw2 deny] interf ipsrc ipdest portsrc portdest pro)                               
                   ([aclfw1new deny] interminterface tempnatsrc ipdest portsrc portdest pro)
                   ([aclfw1new rule6_matches] interminterface tempnatsrc ipdest portsrc portdest pro)
                   ([aclfw1new rule6_applies] interminterface tempnatsrc ipdest portsrc portdest pro)))



; !!! TODO: m-show should be specifying to constants, not just sorts now. e.g. 
; interf: Interface 
; should be
; interf: 'fw2int 


;; **************************************************
;; Example 5: verifying the new property
;; after SECOND new policy
;; **************************************************
;
;
;(define example5 
;"(forsome interf Interface
;(forsome ipsrc IPAddress
;(forsome ipdest IPAddress
;(forsome portsrc Port
;(forsome portdest Port
;(forsome pro Protocol
;(forsome tempnatsrc IPAddress
;(forsome interminterface Interface
;(and
;  (fw2int interf)
;  (fw1dmz interminterface)
;  
;  (port80 portdest)
;  (tcp pro)
;  (outsideips ipdest)
;
;  (or
;      (and
;        (not (managerpc ipsrc))
;        (InboundACL_FW2_New:Accept interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;        (InboundNAT_FW2:Translate interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;        (InboundACL_FW1_New:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;      )
;  
;      (and
;        (managerpc ipsrc)
;        (or
;           (InboundACL_FW2_New:Deny interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;
;           (and
;              (InboundNAT_FW2:Translate interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;              (InboundACL_FW1_New:Deny interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;            )
;         )
;       )
;   )
;)))))))))")
;
;
;(define qry5 (query-policies expolicies example5))
;;(set-tupling qry5 #t)
;(set-size-ceiling qry5 8)
;
;;(set-debug-level qry5 3)
;(display "QUERY 5:") (newline)
;(pretty-print-results qry5)
;
;
;
;
;
;; ************************************************************
;; Example 4: "Now that we fixed the bug, what changed?"
;; ************************************************************
;
;; NOT a full change-impact. Shorter due to what we changed and
;; the topology.
;
;
;(define example4
;"(forsome interf Interface
;(forsome ipsrc IPAddress
;(forsome ipdest IPAddress
;(forsome portsrc Port
;(forsome portdest Port
;(forsome pro Protocol
;(forsome tempnatsrc IPAddress
;(forsome interminterface Interface
;(and
;  (fw2int interf)
;  (fw1dmz interminterface)
;
;  (InboundACL_FW2:Accept interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;  (InboundNAT_FW2:Translate interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;
;  (or
;      (and
;        (not (InboundACL_FW1:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc))
;        
;        (InboundACL_FW1_New:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;      )
;
;      (and
;        (not (InboundACL_FW1_New:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc))
;        
;        (InboundACL_FW1:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;      )
;  )
;)))))))))")
;
;
;
;
;
;
;(define qry4 (query-policies expolicies example4))
;
;; odd answer from tupling. is this the = bug? TODO
;(set-tupling qry4 #t)
;(set-size-ceiling qry4 8)
;;(set-debug-level qry4 3)
;(display "QUERY 4:") (newline)
;(pretty-print-results qry4)
;;(pretty-print-results-condensed qry4)                        
;
;; ********************************************************
;; Example 6
;; ********************************************************
;
;(define example6
;"(forsome interf Interface
;(forsome ipsrc IPAddress
;(forsome ipdest IPAddress
;(forsome portsrc Port
;(forsome portdest Port
;(forsome pro Protocol
;(forsome tempnatsrc IPAddress
;(forsome interminterface Interface
;(and
;  (fw2int interf)
;  (fw1dmz interminterface)
;
;  (port80 portdest)
;  (tcp pro)
;  (outsideips ipdest)
;
;  (or
;      (and
;        (not (managerpc ipsrc))
;        (InboundACL_FW2_Ex6:Accept interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;        (InboundNAT_FW2_Ex6:Translate interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;        (InboundACL_FW1_Ex6:Accept interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;      )
;
;      (and
;        (managerpc ipsrc)
;        (or
;           (InboundACL_FW2_Ex6:Deny interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;
;           (and
;              (InboundNAT_FW2_Ex6:Translate interf ipsrc ipdest portsrc portdest pro tempnatsrc)
;              (InboundACL_FW1_Ex6:Deny interminterface tempnatsrc ipdest portsrc portdest pro tempnatsrc)
;            )
;         )
;       )
;   )
;)))))))))")
;
;(define qry6 (query-policies expolicies example6))
;
;(set-tupling qry6 #t)
;(display "QUERY 6:") (newline)
;(pretty-print-results qry6)
;
