

create vocabulary myvoc;
add to myvoc sort xsort;
add to myvoc subsort xsort s1;
add to myvoc subsort xsort s2;
add to myvoc decision permit;
add to myvoc decision deny;
add to myvoc requestvar x xsort;
add to myvoc requestvar y xsort;

create policy leaf mypol myvoc;
add rule to mypol rule1 permit (s1 x) (s2 y);
add rule to mypol rule2 deny (s2 x) (s1 y);
prepare mypol;

// test without tupling

explore xsort(x)
UNDER mypol
idboutput mypol:rule1, mypol:rule2, mypol:rule1_applies, mypol:rule2_applies

show populated 0 mypol:rule1, mypol:rule2 for cases mypol:rule1_applies, mypol:rule2_applies;


// test with tupling

explore xsort(x)
UNDER mypol
idboutput mypol:rule1(x), mypol:rule2(x), mypol:rule1_applies(x), mypol:rule2_applies(x)
tupling;

show populated 0 mypol:rule1(x), mypol:rule2(x) for cases mypol:rule1_applies(x), mypol:rule2_applies(x);





//  check >1 vector size


create vocabulary myvoc;
add to myvoc sort xsort;
add to myvoc subsort xsort s1;
add to myvoc subsort xsort s2;
add to myvoc decision permit;
add to myvoc decision deny;
add to myvoc requestvar x xsort;
add to myvoc requestvar y xsort;

create policy leaf mypol myvoc;
add rule to mypol rule1 permit (s1 x) (s2 y);
add rule to mypol rule2 deny (s2 x) (s1 y);
prepare mypol;


explore xsort(x) and xsort(y)
UNDER mypol
idboutput mypol:rule1(x, y), mypol:rule2(x, y), mypol:rule1_applies(x, y), mypol:rule2_applies(x, y)
tupling;

show populated 0 mypol:rule1(x, y), mypol:rule2(x, y) for cases mypol:rule1_applies(x, y), mypol:rule2_applies(x, y);

show populated 0 mypol:rule1(y, x), mypol:rule2(x, y) for cases mypol:rule1_applies(x, y), mypol:rule2_applies(x, y);
show populated 0 mypol:rule1(x, y), mypol:rule2(x, y) for cases mypol:rule1_applies(y, x), mypol:rule2_applies(x, y);

show unpopulated 0 mypol:rule1(x, y), mypol:rule2(x, y) for cases mypol:rule1_applies(x, y), mypol:rule2_applies(x, y);

show unpopulated 0 mypol:rule1(y, x), mypol:rule2(x, y) for cases mypol:rule1_applies(x, y), mypol:rule2_applies(x, y);
show unpopulated 0 mypol:rule1(x, y), mypol:rule2(x, y) for cases mypol:rule1_applies(y, x), mypol:rule2_applies(x, y);


